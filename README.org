#+TITLE: SAT-Solver based on Polynomials

The project aims to solve the famous SAT problem in a efficient way. In order
to do that it's used a different algorithm based on transforming
propositional logic formulas into polynomials and then use the independence
rule (or delta rule). There is further information obout the algorithm in this
[[ ][paper?]].

The documentation about the modules it's hosted [[https://danielrodcha.github.io/SAT-Pol/][here]].

** User guide (Spanish)
Aquí se describen las pautas a seguir para poder usar la librería,
suponiendo que el lector no tiene instalados ninguno de los programas
necesarios.

*** Git
En primer lugar será necesario [[https://git-scm.com/book/en/v2/Getting-Started-Installing-Git][git]] . En caso de no estar instalado
siga las instrucciones del enlace anterior.

Una vez instalado git correctamente, vaya a la terminal de comandos y
escriba:

#+BEGIN_SRC
git clone https://github.com/DanielRodCha/SAT-Pol.git
#+END_SRC

*** Stack
La librería está escrita en lenguaje Haskell, así que se será
necesario instalar la herramienta [[https://docs.haskellstack.org/en/stable/README/][stack]]. Dicha herramienta será muy
útil ya que construirá todo el proyecto, además de descargar las
librerías auxiliares.

Tras haber completado la instalación de la herramienta stack, navegue
por los ficheros desde el terminal hasta encontrarse en la carpeta
SAT-Pol, que se creó en el paso anterior. A continuación, contruya el
proyecto escribiendo en el terminal:

#+BEGIN_SRC
stack build
#+END_SRC

*** MainFunctions
**** Cargar el módulo MainFunctions
Por último, se recomienda al usuario que cargue el módulo
src/MainFunctions,  ya que en él figuran las funciones más importantes
de la librería. Para ello, escriba en la terminal:

#+BEGIN_SRC
SAT-Pol danrodcha$ stack ghci
SAT-Pol-0.1.0.0: initial-build-steps (lib + exe)
Configuring GHCi with the following packages: SAT-Pol

The main module to load is ambiguous. Candidates are: 
1. Package `SAT-Pol' component exe:sat with main-is file: /Users/danrodcha/SAT-Pol/app2/Main.hs
2. Package `SAT-Pol' component exe:satCNF with main-is file: /Users/danrodcha/SAT-Pol/app/Main.hs
You can specify which one to pick by: 
 * Specifying targets to stack ghci e.g. stack ghci SAT-Pol:exe:sat
 * Specifying what the main is e.g. stack ghci --main-is SAT-Pol:exe:sat
 * Choosing from the candidate above [1..2]

Specify main module to use (press enter to load none): 
#+END_SRC

Pulse Enter:

#+BEGIN_SRC
Not loading any main modules, as no valid module selected

GHCi, version 8.2.2: http://www.haskell.org/ghc/  :? for help
[ 1 of 13] Compiling Haskell4Maths    ( /Users/danrodcha/SAT-Pol/src/Haskell4Maths.hs, interpreted )
[ 2 of 13] Compiling F2               ( /Users/danrodcha/SAT-Pol/src/F2.hs, interpreted )
[ 3 of 13] Compiling Heuristics       ( /Users/danrodcha/SAT-Pol/src/Heuristics.hs, interpreted )
[ 4 of 13] Compiling Logic            ( /Users/danrodcha/SAT-Pol/src/Logic.hs, interpreted )
[ 5 of 13] Compiling Analizador       ( /Users/danrodcha/SAT-Pol/src/Analizador.hs, interpreted )
[ 6 of 13] Compiling Subsumption      ( /Users/danrodcha/SAT-Pol/src/Subsumption.hs, interpreted )
[ 7 of 13] Compiling Transformations  ( /Users/danrodcha/SAT-Pol/src/Transformations.hs, interpreted )
[ 8 of 13] Compiling Preprocessing    ( /Users/danrodcha/SAT-Pol/src/Preprocessing.hs, interpreted )
[ 9 of 13] Compiling LogicParser      ( /Users/danrodcha/SAT-Pol/src/LogicParser.hs, interpreted )
[10 of 13] Compiling Derivative       ( /Users/danrodcha/SAT-Pol/src/Derivative.hs, interpreted )
[11 of 13] Compiling Rule             ( /Users/danrodcha/SAT-Pol/src/Rule.hs, interpreted )
[12 of 13] Compiling Saturation       ( /Users/danrodcha/SAT-Pol/src/Saturation.hs, interpreted )
[13 of 13] Compiling MainFunctions    ( /Users/danrodcha/SAT-Pol/src/MainFunctions.hs, interpreted )
Ok, 13 modules loaded.
Loaded GHCi configuration from /private/var/folders/k5/5wbfgm4d5cbbbgm0c9hqk94m0000gn/T/ghci12315/ghci-script
*Transformations Analizador Derivative F2 Haskell4Maths Heuristics Logic LogicParser MainFunctions Preprocessing Rule Saturation Subsumption Transformations> 
#+END_SRC

Cargue el módulo MainFunctions:

#+BEGIN_SRC
*Transformations Analizador Derivative F2 Haskell4Maths Heuristics Logic LogicParser MainFunctions Preprocessing Rule Saturation Subsumption Transformations> :l MainFunctions 
[ 1 of 12] Compiling Haskell4Maths    ( /Users/danrodcha/SAT-Pol/src/Haskell4Maths.hs, interpreted )
[ 2 of 12] Compiling F2               ( /Users/danrodcha/SAT-Pol/src/F2.hs, interpreted )
[ 3 of 12] Compiling Heuristics       ( /Users/danrodcha/SAT-Pol/src/Heuristics.hs, interpreted )
[ 4 of 12] Compiling Logic            ( /Users/danrodcha/SAT-Pol/src/Logic.hs, interpreted )
[ 5 of 12] Compiling Analizador       ( /Users/danrodcha/SAT-Pol/src/Analizador.hs, interpreted )
[ 6 of 12] Compiling Subsumption      ( /Users/danrodcha/SAT-Pol/src/Subsumption.hs, interpreted )
[ 7 of 12] Compiling Transformations  ( /Users/danrodcha/SAT-Pol/src/Transformations.hs, interpreted )
[ 8 of 12] Compiling Preprocessing    ( /Users/danrodcha/SAT-Pol/src/Preprocessing.hs, interpreted )
[ 9 of 12] Compiling Derivative       ( /Users/danrodcha/SAT-Pol/src/Derivative.hs, interpreted )
[10 of 12] Compiling Rule             ( /Users/danrodcha/SAT-Pol/src/Rule.hs, interpreted )
[11 of 12] Compiling Saturation       ( /Users/danrodcha/SAT-Pol/src/Saturation.hs, interpreted )
[12 of 12] Compiling MainFunctions    ( /Users/danrodcha/SAT-Pol/src/MainFunctions.hs, interpreted )
Ok, 12 modules loaded.
*MainFunctions> 
#+END_SRC

**** Consideraciones previas
Como una base de conocimiento es un conjunto de reglas, las listas de
reglas se sumergirán en el tipo de dato Set (conjunto). Esto nos
permite trabajar con bases de conocimiento sin elementos repetidos, es
decir sin redundancias. Para hacer esta inmersión manualmente se puede
usar la función fromList:

#+BEGIN_SRC haskell
*MainFunctions> S.fromList []
fromList []
*MainFunctions> S.fromList [1,2,3,1,2]
fromList [1,2,3]
*MainFunctions> [x1,x2,x3,x4] = map var ["x1","x2","x3","x4"] :: [PolF2]
*MainFunctions> S.fromList [x1,x2,x1+1,x1]
fromList [x1,x1+1,x2]
#+END_SRC

Tal y como se ve en el ejemplo anterior, si queremos definir nuestros
propios polinomios se deben declarar las variables
previamente. Posteriormente se verá que esto no es necesario si
importamos una base de conocimiento desde un archivo de texto.

A continuación se exponen las principales tareas que puede resolver esta librería:
**** Olvidar una variable mediante la regla de independencia:
Para ello basta con usar la función forgetVarKB:

#+BEGIN_SRC haskell
*MainFunctions> x1 = (var "x1") :: PolF2
*MainFunctions> x2 = (var "x2") :: PolF2
*MainFunctions> forgetVarKB x2 (S.fromList [x2,x1*x2,x1+1])
-- fromList [x1,x1+1,1]
*MainFunctions> forgetVarKB x1 (S.fromList [x1,x1+1,1])
-- fromList [0]
#+END_SRC

**** Olvidar una lista determinada de variables mediante la regla de independecia
Existen dos formas de hacerlo, dejando que la librería escoja el orden
en el que va a olvidar cada variable (según una heurística o
especificándolo manualmente).

- Según heurística:
#+BEGIN_SRC haskell
*MainFunctions> [x1,x2,x3,x4] = map var ["x1","x2","x3","x4"] :: [PolF2]
*MainFunctions> forgetVarListKB' (S.fromList [x2,x1*x2,x1+1,x3+x4,x1*x2*x4+x2+1],[x1,x2,x3,x4]) frequency
[fromList [x1x2x4+x2+1,x1x2,x1+1,x2,1],fromList [x1x2,x1x2+x2+1,x1+1,x2,1],fromList [0],fromList [0]]
#+END_SRC

- Orden dado:
#+BEGIN_SRC haskell
*MainFunctions> [x1,x2,x3,x4] = map var ["x1","x2","x3","x4"] :: [PolF2]
*MainFunctions> forgetVarListKB (S.fromList [x2,x1*x2,x1+1,x3+x4,x1*x2*x4+x2+1],[x3,x2,x4,x1])
[fromList [x1x2x4+x2+1,x1x2,x1+1,x2,1],fromList [x1x4,x1,x1+1,1],fromList [x1,x1+1,1],fromList [0]]
#+END_SRC

**** Resolver el problema SAT
Existen dos funciones para hacerlo, la primera resuelve directamente
el problema y nos da la solución:

#+BEGIN_SRC haskell
*MainFunctions> [x1,x2,x3,x4] = map var ["x1","x2","x3","x4"] :: [PolF2]
*MainFunctions> saturateKB (S.fromList [x2,x1*x2,x1+1,x3+x4,x1*x2*x4+x2+1],[x1,x2,x3,x4]) frequency
False
#+END_SRC

Mientras que la segunda, devuelve la traza de los cálculos realizados:

#+BEGIN_SRC haskell
*MainFunctions> [x1,x2,x3,x4] = map var ["x1","x2","x3","x4"] :: [PolF2]
*MainFunctions> saturateKBTrace (S.fromList [x2,x1*x2,x1+1,x3+x4,x1*x2*x4+x2+1],[x1,x2,x3,x4]) frequency
[(fromList [x1x2x4+x2+1,x1x2,x1+1,x2,x3+x4],True),(fromList [0],False)]
#+END_SRC
**** Instancias escritas en archivos de texto
Una de las ventajas de esta librería es que permite interactuar con
ejemplos escritos en archivos de texto, aunque deben estar escritos en
formatos aptos, es decir, formato [[http://www.satcompetition.org/2009/format-benchmarks2009.html][DIMACS]] o la [[http://www.cs.us.es/~fsancho/?e=173][sintaxis de Prover9]]:

Si el archivo contiene la base de conocimiento en formato DIMACS, las
funciones que sirven para interactuar son:

#+BEGIN_SRC
*MainFunctions> dimacs2Pols "exDIMACS/easy/example1.txt"
(fromList [x1x2+x1+x2,1],[x1,x2])
*MainFunctions> satCNF "exDIMACS/easy/example1.txt" "frequency"
The satisfactibility of instance exDIMACS/easy/example1.txt solved by frequency heuristics is:
True
#+END_SRC

Se debe tener en cuenta que se especifica el nombre de la heurística
que se quiere utilizar mediante una cadena de caracteres.

Por otro lado, si el archivo contiene la base de conocimiento según la
sintaxis de Prover9 (teniendo en cuenta que sólo trabaja con lógica
proposicional), las funciones son:

#+BEGIN_SRC
*MainFunctions> formulas2Pols "exFORMULAS/easy/example1.txt"
(fromList [x1x2+x1+x2,x1x3,x1x3+x3+1,x1x4+x4],[x1,x2,x3,x4])
*MainFunctions> satFORMULAS "exFORMULAS/easy/example1.txt" "frequency"
The satisfactibility of instance exFORMULAS/easy/example1.txt solved by frequency heuristics is:
False
#+END_SRC

**** Resolver una instancia SAT desde la terminal de comandos
La herramienta stack incluye la posibilidad de crear accesos directos
a ciertas funciones. Aprovechando esto se han definido dos distintos
en función del fichero de entrada. Si el conjunto de fórmulas está en
formato DIMACS el ejecutable que se debe usar se llama satCNF, seguido
del fichero que se quiere usar, así como de la heurística escogida:

#+BEGIN_SRC
MacBook-Air-de-Daniel:SAT-Pol danrodcha$ stack build
MacBook-Air-de-Daniel:SAT-Pol danrodcha$ stack exec satCNF exDIMACS/medium/exampleSat2.txt frequency
The satisfactibility of instance exDIMACS/medium/exampleSat2.txt solved by frequency heuristics is:
True
#+END_SRC

Si el conjunto de fórmulas sigue la sintaxis de Prove9, el ejecutable
que se debe usar se llama sat, y debe ir seguido del fichero que se
quiere usar, así como de la heurística escogida:

#+BEGIN_SRC
MacBook-Air-de-Daniel:SAT-Pol danrodcha$ stack build
MacBook-Air-de-Daniel:SAT-Pol danrodcha$ stack exec sat exFORMULAS/easy/example1.txt frequency
The satisfactibility of instance exFORMULAS/easy/example1.txt solved by frequency heuristics is:
False
#+END_SRC

** exDIMACS study
This directory stores several examples of sets of formulas in DIMACS format. See [[http://www.satcompetition.org/2009/format-benchmarks2009.html][DIMACS format]] for further
information about it.
*** Trivial Examples
**** example1
+ Corresponds to the formula: (p ^ q)
+ It's True
**** example2
+ Corresponds to the formula: (p ^ q) v (¬p ^ q)
+ It's True
**** example3
+ Corresponds to the formula: (p ^ q) v (¬p ^ q) v (p ^ ¬q)
+ It's True
**** example4
+ Corresponds to the formula: (p ^ q) v (¬p ^ q) v (p ^ ¬q) v (¬p ^ ¬q)
+ It's False
*** Medium Examples
**** exampleSat0
#+BEGIN_SRC haskell
*MainFunctions> satCNF
The satisfactibility of instance exDIMACS/medium/exampleSat0.txt solved by frequency heuristics is:
True
(0.22 secs, 62,421,664 bytes)
#+END_SRC
**** exampleSat1
#+BEGIN_SRC haskell
*MainFunctions> satCNF
The satisfactibility of instance exDIMACS/medium/exampleSat1.txt solved by frequency heuristics is:
True
(0.30 secs, 91,977,392 bytes)
#+END_SRC
**** exampleSat2
#+BEGIN_SRC haskell
*MainFunctions> satCNF
The satisfactibility of instance exDIMACS/medium/exampleSat2.txt solved by frequency heuristics is:
True
(5.75 secs, 2,316,817,464 bytes)
#+END_SRC
**** exampleSat3
#+BEGIN_SRC haskell
*MainFunctions> satCNF
The satisfactibility of instance exDIMACS/medium/exampleSat0.txt solved by frequency heuristics is:
True
(0.22 secs, 62,421,664 bytes)
#+END_SRC
*** Hard Examples
**** sat100
+ Has 430 clauses
+ Has 100 variables
+ It's True
**** sat250
+ Has 1065 clauses
+ Has 250 variables
+ It's True
**** unsat250
+ Has 1065 clauses
+ Has 250 variables
+ It's False
#+BEGIN_SRC haskell
*MainFunctions> satCNF
The satisfactibility of instance exDIMACS/hard/unsat250.cnf solved by frequency heuristics is:
False
(0.07 secs, 34,195,800 bytes)
#+END_SRC


** References 
https://github.com/andrepd/haskell-logic/blob/master/logic_parser.hs
