-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package SAT-Pol
@version 0.1.0.0


-- | This module contains several examples in order to verify the good
--   functioning of the other modules.
module Examples
x1 :: LexPoly F2 String
example :: [LexPoly F2 String]
exampleSet :: Set (LexPoly F2 String)
exampleMonomial1 :: Lex v
exampleMonomial2 :: Lex [Char]
exampleMonomial3 :: Lex [Char]
ej2 :: Vect F2 (Lex String)
ej1 :: LexPoly F2 String
ej3 :: LexPoly F2 String

module PolAux

-- | The data type PolF2 is the field of polynomial with coefficients in
--   the finite field F2.
type PolF2 = Vect F2 (Lex String)

-- | (<b>expTo1 p</b>) is the representative with leastest degree of the
--   polynomial p in the quotient group
--   F2[x_1,...,x_N]/(x_1+x_1^2,...,x_N+x_N^2). The main idea is to replace
--   every ocurrence of x_i^M with x_i thus we obtain an identical
--   polynomial without exponents greater than 1.
--   
--   In the library HaskellForMaths exists a function that performs the
--   same (%%) so we can check the results. For example,
--   
--   <pre>
--   &gt;&gt;&gt; expTo1 (x1^3)
--   x1
--   
--   &gt;&gt;&gt; (x1^3) %% [x1^2+x1]
--   x1
--   
--   &gt;&gt;&gt; expTo1 (x1^3*x2^6+x3^2*x4+x1+1)
--   x1x2+x1+x3x4+1
--   
--   &gt;&gt;&gt; let pol = x1^3*x2^6+x3^2*x4+x1+1
--   
--   &gt;&gt;&gt; let list = [x1^2+x1,x2^2+x2,x3^2+x3,x4^2+x4]
--   
--   &gt;&gt;&gt; pol %% list
--   x1x2+x1+x3x4+1
--   </pre>
expTo1 :: PolF2 -> PolF2

-- | (<b>deriv p v</b>) is the derivative of the polynomial p with respect
--   to the variable v. It's important to note that deriv only works if it
--   applies to polynomials without exponents greater than 1. In practice,
--   deriv will only be used with the polynomials that have been previously
--   embeded in the quotient group described above. For example,
--   &gt;&gt;&gt; let v = x1 &gt;&gt;&gt; deriv v v 1 &gt;&gt;&gt; deriv
--   (1+x1+x2+x1*x2) v x2+1 &gt;&gt;&gt; deriv (x1*x2+x1+x3*x4+1) v x2+1
deriv :: PolF2 -> PolF2 -> PolF2
var :: (Num k, MonomialConstructor m) => v -> Vect k (m v)
zerov :: Vect k b


-- | This module aims to provide an efficient tool to solve the SAT
--   problem. Both the algorithm and the implementation have been carried
--   out by the researchers from the department of Computer Science and
--   Artificial Intelligence at the University of Seville.
module Tool

-- | <b>(tool (ps,vvs))</b> is verified if the original set of formulas
--   which polynomials from <i>ps</i> came was satisfiable. Otherwise, the
--   function will return False if that set of formulas was unsatisfiable.
--   Note that <i>vvs</i> is the set of variables which occurs in any
--   polynomial from <i>ps</i>. For example,
--   
--   <pre>
--   &gt;&gt;&gt; tool (S.fromList[1],S.empty)
--   True
--   
--   &gt;&gt;&gt; tool (S.fromList[x1,x1+1],S.fromList[x1])
--   False
--   </pre>
tool :: (Set (PolF2), Set (PolF2)) -> Bool

module ReadingF

-- | <b>(clause2pol cs)</b> is a pair <i>(p,vs)</i>, where <i>p</i> is the
--   polynomial that corresponds to the clause <i>cs</i> (which is written
--   in DIMACS format) and <i>vs</i> is the set of its variables.
--   
--   <pre>
--   &gt;&gt;&gt; clause2pol ["1"]
--   (x1,fromList [x1])
--   
--   &gt;&gt;&gt; clause2pol ["1","-2"]
--   (x1x2+x2+1,fromList [x1,x2])
--   </pre>
clause2pol :: [String] -> (PolF2, Set (PolF2))

-- | <b>(var' lit)</b> is the pair <i>(p,v)</i>, where <i>p</i> is the
--   polynomial and <i>v</i> is the variable that corresponds (if it does)
--   to the literal <i>lit</i> (in DIMACS format).
--   
--   <pre>
--   &gt;&gt;&gt; var' "0"
--   (0,0)
--   
--   &gt;&gt;&gt; var' "1"
--   (x1,x1)
--   
--   &gt;&gt;&gt; var' "-1"
--   (x1+1,x1)
--   </pre>
var' :: String -> (PolF2, PolF2)

-- | <b>(dimacs2pols f)</b> is the pair (<i>ps</i>,<i>vs</i>) where ps is
--   the set of polynomials wich corresponds to the formula in DIMACS
--   format writed in the file <i>f</i> and <i>vs</i> is the set of
--   variables wich occurs in any polynomial.
--   
--   <pre>
--   &gt;&gt;&gt; dimacs2pols "exDIMACS/easy/example1.txt"
--   (fromList [x1x2+x1+x2,1],fromList [x1,x2])
--   
--   &gt;&gt;&gt; dimacs2pols "exDIMACS/easy/example4.txt"
--   (fromList [x1x2+x1+x2,x1x2+x1+1,x1x2+x2+1,x1x2+1,1],fromList [x1,x2])
--   </pre>
dimacs2pols :: FilePath -> IO ()

-- | <b>(main f)</b> is verified if the set of formulas in DIMACS format in
--   the file <i>f</i> were satisfiable. Otherwise, <i>(main f)</i> would
--   return False.
--   
--   <pre>
--   &gt;&gt;&gt; main "exDIMACS/easy/example1.txt"
--   True
--   
--   &gt;&gt;&gt; main "exDIMACS/easy/example4.txt"
--   False
--   </pre>
main :: FilePath -> IO ()
