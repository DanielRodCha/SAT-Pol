-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package SAT-Pol
@version 0.1.0.0

module Haskell4Maths
data F2 :: *
data MonImpl v :: * -> *
M :: Int -> [(v, Int)] -> MonImpl v
newtype Vect k b :: * -> * -> *
V :: [(b, k)] -> Vect k b
linear :: (Eq k, Num k, Ord b) => (a -> Vect k b) -> Vect k a -> Vect k b
zerov :: () => Vect k b
newtype Lex v :: * -> *
Lex :: MonImpl v -> Lex v
data Glex v :: * -> *
data Grevlex v :: * -> *
var :: (Num k, MonomialConstructor m) => v -> Vect k m v
mindices :: MonomialConstructor m => forall v. () => m v -> [(v, Int)]
lm :: () => Vect b c -> c
lt :: () => Vect k b -> (b, k)
eval :: (Eq k, Num k, MonomialConstructor m, Eq m v, Show v) => Vect k m v -> [(Vect k m v, k)] -> k
(%%) :: (Eq k, Fractional k, Monomial m, Ord m, Algebra k m) => Vect k m -> [Vect k m] -> Vect k m
vars :: (Num k, Ord k, MonomialConstructor m, Ord m v) => Vect k m v -> [Vect k m v]

module F2

-- | The data type VarF2 is the set of polynomial variables of PolF2.
data VarF2

-- | The data type PolF2 is the field of polynomial with coefficients in
--   the finite field F2.
type PolF2 = Vect F2 (Lex String)
unbox :: VarF2 -> PolF2
instance GHC.Classes.Ord F2.VarF2
instance GHC.Classes.Eq F2.VarF2
instance GHC.Show.Show F2.VarF2
instance Test.QuickCheck.Arbitrary.Arbitrary F2.VarF2
instance Test.QuickCheck.Arbitrary.Arbitrary F2.PolF2

module Heuristics

-- | The Heuristic data type indicates the order in which variables are
--   forgotten.
type Heuristics = Set PolF2 -> [PolF2] -> [PolF2]

-- | (<b> monomialOrd ps vs </b>) is the list of variables which occurs in
--   ps in the monomial order induced by the data type PolF2. For example:
--   
--   <pre>
--   &gt;&gt;&gt; [x1,x2] = map var ["x1","x2"] :: [PolF2]
--   
--   &gt;&gt;&gt; monomialOrd (S.fromList [x1,x2,x1+1]) [x1,x2]
--   [x1,x2]
--   </pre>
monomialOrd :: Heuristics

-- | (<b> frequency ps vs </b>) is the list of variables vs sorted by
--   frequency of occurrence in ps. For example:
--   
--   <pre>
--   &gt;&gt;&gt; [x1,x2] = map var ["x1","x2"] :: [PolF2]
--   
--   &gt;&gt;&gt; frequency (S.fromList [x1,x2,x1+1]) [x1,x2]
--   [x2,x1]
--   </pre>
frequency :: Heuristics

-- | (<b> revFreq ps vs </b>) is the list of variables vs ordered in
--   reverse order of frequency in ps. For example:
--   
--   <pre>
--   &gt;&gt;&gt; [x1,x2] = map var ["x1","x2"] :: [PolF2]
--   
--   &gt;&gt;&gt; revFreq (S.fromList [x1,x2,x1+1]) [x1,x2]
--   [x1,x2]
--   </pre>
revFreq :: Heuristics

module Logic
type VarProp = String
data FProp
T :: FProp
F :: FProp
Atom :: VarProp -> FProp
Neg :: FProp -> FProp
Conj :: FProp -> FProp -> FProp
Disj :: FProp -> FProp -> FProp
Impl :: FProp -> FProp -> FProp
Equi :: FProp -> FProp -> FProp
p :: FProp
q :: FProp
r :: FProp
no :: FProp -> FProp
(∨) :: FProp -> FProp -> FProp
infixr 5 ∨
(∧) :: FProp -> FProp -> FProp
infixr 4 ∧
(→) :: FProp -> FProp -> FProp
infixr 3 →
(↔) :: FProp -> FProp -> FProp
infixr 2 ↔

-- | For example, &gt;&gt;&gt; substitute (no p) "p" q ¬q &gt;&gt;&gt;
--   substitute (no (q ∧ no p)) "p" (q ↔ p) ¬(q ∧ ¬(q ↔ p))
substitute :: FProp -> VarProp -> FProp -> FProp
type Interpretation = [FProp]

-- | For example,
--   
--   <pre>
--   &gt;&gt;&gt; signify ((p ∨ q) ∧ ((no q) ∨ r)) [r]
--   False
--   
--   &gt;&gt;&gt; signify ((p ∨ q) ∧ ((no q) ∨ r)) [p,r]
--   True
--   </pre>
signify :: FProp -> Interpretation -> Bool

-- | For example,
--   
--   <pre>
--   &gt;&gt;&gt; isModelForm [r]   ((p ∨ q) ∧ ((no q) ∨ r))
--   False
--   
--   &gt;&gt;&gt; isModelForm [p,r] ((p ∨ q) ∧ ((no q) ∨ r))
--   True
--   </pre>
isModelForm :: Interpretation -> FProp -> Bool

-- | For example,
--   
--   <pre>
--   &gt;&gt;&gt; propSymbolsForm (p ∧ q → p)
--   [p,q]
--   </pre>
propSymbolsForm :: FProp -> [FProp]

-- | For example,
--   
--   <pre>
--   &gt;&gt;&gt; interpretationsForm (p ∧ q → p)
--   [[],[p],[q],[p,q]]
--   </pre>
interpretationsForm :: FProp -> [Interpretation]

-- | For example,
--   
--   <pre>
--   &gt;&gt;&gt; modelsForm ((p ∨ q) ∧ ((no q) ∨ r))
--   [[p],[p,r],[q,r],[p,q,r]]
--   </pre>
modelsForm :: FProp -> [Interpretation]

-- | For example,
--   
--   <pre>
--   &gt;&gt;&gt; isValid (p → p)
--   True
--   
--   &gt;&gt;&gt; isValid (p → q)
--   False
--   
--   &gt;&gt;&gt; isValid ((p → q) ∨ (q → p))
--   True
--   </pre>
isValid :: FProp -> Bool

-- | For example,
--   
--   <pre>
--   &gt;&gt;&gt; isUnsatisfiable (p ∧ (no p))
--   True
--   
--   &gt;&gt;&gt; isUnsatisfiable ((p → q) ∧ (q → r))
--   False
--   </pre>
isUnsatisfiable :: FProp -> Bool

-- | For example,
--   
--   <pre>
--   &gt;&gt;&gt; isSatisfiable (p ∧ (no p))
--   False
--   
--   &gt;&gt;&gt; isSatisfiable ((p → q) ∧ (q → r))
--   True
--   </pre>
isSatisfiable :: FProp -> Bool
type KB = Set FProp

-- | For example,
--   
--   <pre>
--   &gt;&gt;&gt; propSymbolsKB (S.fromList [p ∧ q → r, p → r])
--   [p,r,q]
--   </pre>
propSymbolsKB :: KB -> [FProp]

-- | For example,
--   
--   <pre>
--   &gt;&gt;&gt; interpretationsKB (S.fromList [p → q, q → r])
--   [[],[p],[q],[p,q],[r],[p,r],[q,r],[p,q,r]]
--   </pre>
interpretationsKB :: KB -> [Interpretation]

-- | For example,
--   
--   <pre>
--   &gt;&gt;&gt; isModelKB [r] (S.fromList [q,no p ,r])
--   False
--   
--   &gt;&gt;&gt; isModelKB [q,r] (S.fromList [q,no p ,r])
--   True
--   </pre>
isModelKB :: Interpretation -> KB -> Bool

-- | For example,
--   
--   <pre>
--   &gt;&gt;&gt; modelsKB $ S.fromList [(p ∨ q) ∧ ((no q) ∨ r), q → r]
--   [[p],[p,r],[q,r],[p,q,r]]
--   
--   &gt;&gt;&gt; modelsKB $ S.fromList [(p ∨ q) ∧ ((no q) ∨ r), r → q]
--   [[p],[q,r],[p,q,r]]
--   </pre>
modelsKB :: KB -> [Interpretation]

-- | For example,
--   
--   <pre>
--   &gt;&gt;&gt; isConsistent $ S.fromList [(p ∨ q) ∧ ((no q) ∨ r), p → r]
--   True
--   
--   &gt;&gt;&gt; isConsistent $ S.fromList [(p ∨ q) ∧ ((no q) ∨ r), p → r, no r]
--   False
--   </pre>
isConsistent :: KB -> Bool

-- | For example,
--   
--   <pre>
--   &gt;&gt;&gt; isInconsistent $ S.fromList [(p ∨ q) ∧ ((no q) ∨ r), p → r]
--   False
--   
--   &gt;&gt;&gt; isInconsistent $ S.fromList [(p ∨ q) ∧ ((no q) ∨ r), p → r, no r]
--   True
--   </pre>
isInconsistent :: KB -> Bool

-- | For example,
--   
--   <pre>
--   &gt;&gt;&gt; isConsequence (S.fromList [p → q, q → r]) (p → r)
--   True
--   
--   &gt;&gt;&gt; isConsequence (S.fromList [p]) (p ∧ q)
--   False
--   </pre>
isConsequence :: KB -> FProp -> Bool

-- | <pre>
--   &gt;&gt;&gt; quickCheck prop_isValid
--   +++ OK, passed 100 tests.
--   </pre>
prop_isValid :: FProp -> Bool

-- | <pre>
--   &gt;&gt;&gt; quickCheck prop_isConsequence
--   +++ OK, passed 100 tests.
--   </pre>
prop_isConsequence :: KB -> FProp -> Bool

-- | For example,
--   
--   <pre>
--   &gt;&gt;&gt; isConsequenceKB (S.fromList [p → q, q → r]) (S.fromList [p → q, p → r])
--   True
--   
--   &gt;&gt;&gt; isConsequenceKB (S.fromList [p]) (S.fromList [p ∧ q])
--   False
--   </pre>
isConsequenceKB :: KB -> KB -> Bool

-- | For example,
--   
--   <pre>
--   &gt;&gt;&gt; equivalent (p → q) (no p ∨ q)
--   True
--   
--   &gt;&gt;&gt; equivalent (p) (no (no p))
--   True
--   </pre>
equivalent :: FProp -> FProp -> Bool

-- | For example,
--   
--   <pre>
--   &gt;&gt;&gt; equivalentKB (S.fromList [p → q,r ∨ q]) (S.fromList [no p ∨ q, q ∨ r])
--   True
--   
--   &gt;&gt;&gt; equivalentKB (S.fromList [p ∧ q]) (S.fromList [q,p])
--   True
--   </pre>
equivalentKB :: KB -> KB -> Bool

-- | <pre>
--   &gt;&gt;&gt; quickCheck prop_equivalent
--   +++ OK, passed 100 tests.
--   </pre>
prop_equivalent :: FProp -> FProp -> Bool
instance GHC.Classes.Ord Logic.FProp
instance GHC.Classes.Eq Logic.FProp
instance GHC.Show.Show Logic.FProp
instance Test.QuickCheck.Arbitrary.Arbitrary Logic.FProp

module Subsumption
isDivisibleBy :: PolF2 -> PolF2 -> Bool
removeDivisors :: PolF2 -> Set PolF2 -> Set PolF2

module Transformations

-- | For example,
--   
--   <pre>
--   &gt;&gt;&gt; let [p1,p2] = [Atom "p1",Atom "p2"]
--   
--   &gt;&gt;&gt; tr p1
--   x1
--   
--   &gt;&gt;&gt; tr (p1 ∧ p2)
--   x1x2
--   
--   &gt;&gt;&gt; tr (p ∧ (q ∨ r))
--   qrx+qx+rx
--   </pre>
tr :: FProp -> PolF2

-- | (<b>phi p</b>) is the representative with lowest degree of the
--   polynomial p in the quotient group
--   F2[x_1,...,x_N]/(x_1+x_1^2,...,x_N+x_N^2). The main idea is to replace
--   every ocurrence of x_i^M with x_i thus we obtain an identical
--   polynomial without exponents greater than 1.
--   
--   For example, &gt;&gt;&gt; [x1,x2] = [var "x1", var "x2"] :: [PolF2]
--   &gt;&gt;&gt; phi (1+x1+x1^2*x2) x1x2+x1+1
phi :: PolF2 -> PolF2

-- | For example,
--   
--   <pre>
--   &gt;&gt;&gt; let [x1,x2] = [var "x1", var "x2"] :: [PolF2]
--   
--   &gt;&gt;&gt; theta 0
--   ⊥
--   
--   &gt;&gt;&gt; theta (x1*x2)
--   (p1 ∧ p2)
--   
--   &gt;&gt;&gt; theta (x1 + x2 +1)
--   ¬(p1 ↔ ¬(p2 ↔ ⊤))
--   </pre>
theta :: PolF2 -> FProp

-- | For example, &gt;&gt;&gt; [p1,p2] = [Atom "p1",Atom "p2"] &gt;&gt;&gt;
--   proyection p1 x1 &gt;&gt;&gt; tr (p1 → p1 ∧ p2) x1^2x2+x1+1
--   &gt;&gt;&gt; proyection (p1 → p1 ∧ p2) x1x2+x1+1
proyection :: FProp -> PolF2

-- | For example,
--   
--   <pre>
--   &gt;&gt;&gt; [x1,x2] = [var "x1", var "x2"] :: [PolF2]
--   
--   &gt;&gt;&gt; ideal (1+x1+x1^2*x2)
--   [x1^2+x1,x2^2+x2]
--   </pre>
ideal :: PolF2 -> [PolF2]

module Preprocessing

-- | (<b> literal2Pol l </b>)is the pair <i>(p,v)</i>, where <i>p</i> is
--   the polynomial and <i>v</i> is the variable that corresponds (if it
--   does) to the literal <i>lit</i> (in DIMACS format). For example,
--   
--   <pre>
--   &gt;&gt;&gt; literal2Pol "0"
--   (0,0)
--   
--   &gt;&gt;&gt; literal2Pol "1"
--   (x1,x1)
--   
--   &gt;&gt;&gt; literal2Pol "-1"
--   (x1+1,x1)
--   </pre>
literal2Pol :: String -> (PolF2, PolF2)

-- | <b>(clause2pol cs)</b> is a pair <i>(p,vs)</i>, where <i>p</i> is the
--   polynomial that corresponds to the clause <i>cs</i> (which is written
--   in DIMACS format) and <i>vs</i> is the set of its variables. For
--   example,
--   
--   <pre>
--   &gt;&gt;&gt; clause2Pol ["1"]
--   (x1,fromList [x1])
--   
--   &gt;&gt;&gt; clause2Pol ["1","-2"]
--   (x1x2+x2+1,fromList [x1,x2])
--   </pre>
clause2Pol :: [String] -> (PolF2, Set (PolF2))

-- | <b>(dimacs2pols f)</b> is the pair (<i>ps</i>,<i>vs</i>) where ps is
--   the set of polynomials wich corresponds to the formula in DIMACS
--   format writed in the file <i>f</i> and <i>vs</i> is the list of
--   variables wich occurs in any polynomial. For example,
--   
--   <pre>
--   &gt;&gt;&gt; dimacs2Pols "exDIMACS/easy/example1.txt"
--   (fromList [x1x2+x1+x2,1],[x1,x2])
--   
--   &gt;&gt;&gt; dimacs2Pols "exDIMACS/easy/example4.txt"
--   (fromList [x1x2+x1+x2,x1x2+x1+1,x1x2+x2+1,x1x2+1,1],[x1,x2])
--   </pre>
dimacs2Pols :: FilePath -> IO (Set PolF2, [PolF2])

module Derivative

-- | (<b>derivPol p v</b>) is the derivative of the polynomial p with
--   respect to the variable v. It's important to note that deriv only
--   works if it applies to polynomials without exponents greater than 1.
--   In practice, deriv will only be used with the polynomials that have
--   been previously embeded in the quotient group described above. For
--   example,
--   
--   <pre>
--   &gt;&gt;&gt; [x1,x2,x3,x4] = (map var ["x1","x2","x3","x4"]) :: [PolF2]
--   
--   &gt;&gt;&gt; derivPol x1 x1
--   1
--   
--   &gt;&gt;&gt; derivPol (1+x1+x2+x1*x2) x1
--   x2+1
--   
--   &gt;&gt;&gt; derivPol (x1*x2+x1+x3*x4+1) x1
--   x2+1
--   </pre>
derivPol :: PolF2 -> PolF2 -> PolF2

module Rule

-- | (independenceRule v p1 p2) is the polynomial obtained from apply the
--   independence rule described in the paper [?] between polynomials
--   <i>p1</i> <i>p2</i> respect the variable <i>v</i>. It's important to
--   note that as <i>v</i> is the variable from wich we derive, it won't
--   occurs in the output polynomial. For example,
--   
--   <pre>
--   &gt;&gt;&gt; [x1,x2,x3,x4] = (map var ["x1","x2","x3","x4"]) :: [PolF2]
--   
--   &gt;&gt;&gt; independenceRule x1 1 1
--   1
--   
--   &gt;&gt;&gt; independenceRule x1 1 0
--   0
--   
--   &gt;&gt;&gt; independenceRule x1 x1 x1
--   1
--   
--   &gt;&gt;&gt; independenceRule x1 x1 x1*x2
--   x2
--   
--   &gt;&gt;&gt; independenceRule x1 (x1*x3) (x1*x2)
--   x2x3
--   
--   &gt;&gt;&gt; independenceRule x1 (1+x1*x3) (x1*x2)
--   x2x3+x2
--   </pre>
independenceRule :: PolF2 -> PolF2 -> PolF2 -> PolF2

-- | Is the independence rule defined above but applied to propositional
--   formulas.
independenceRuleForm :: VarProp -> FProp -> FProp -> FProp

module Saturation

-- | <b>(independenceRuleAux v p ps acum)</b> is the union of the set
--   <i>accum</i>, which ramains invariant, and the set of polynomials
--   obtained after applying independenceRule respect <i>v</i> between
--   polynomial <i>p</i> and every polynomial from set <i>pps</i>,
--   including itself. However, to improve efficiency the process is
--   terminated if a zero occurs. This is because a zero in the polynomial
--   set is sufficient for the tool to return False. For example,
independenceRuleAux :: PolF2 -> PolF2 -> Set PolF2 -> Set PolF2 -> Set PolF2

-- | <b>(independenceRuleKB v pps acum)</b> is the union of the set
--   <i>accum</i>, which ramains invariant, and the set of polynomials
--   obtained after applying deltaRule respect <i>v</i> between every
--   polynomial from set <i>pps</i>. For example,
--   
--   <pre>
--   &gt;&gt;&gt; [x1,x2,x3] = (map var ["x1","x2","x3"]) :: [PolF2]
--   
--   &gt;&gt;&gt; independenceRuleKB x1 (S.fromList [x1]) (S.fromList [1])
--   fromList [1]
--   
--   &gt;&gt;&gt; independenceRuleKB x1 (S.fromList [x1,x1*x2,x1*x3]) (S.empty)
--   fromList [x2x3,x2,x3,1]
--   </pre>
independenceRuleKB :: PolF2 -> Set PolF2 -> Set PolF2 -> Set PolF2

-- | For example, &gt;&gt;&gt; x1 = (var "x1") :: PolF2 &gt;&gt;&gt; x2 =
--   (var "x2") :: PolF2 &gt;&gt;&gt; forgetVarKB x2 (S.fromList
--   [x2,x1*x2,x1+1]) fromList [x1,x1+1,1] &gt;&gt;&gt; forgetVarKB x1
--   (S.fromList [x1,x1+1,1]) fromList [0]
forgetVarKB :: PolF2 -> Set PolF2 -> Set PolF2

-- | For example,
--   
--   <pre>
--   &gt;&gt;&gt; saturateKB (S.fromList[1],[]) monomialOrd
--   True
--   
--   &gt;&gt;&gt; x1 = (var "x1") :: PolF2
--   
--   &gt;&gt;&gt; saturateKB (S.fromList[x1,x1+1],[x1]) monomialOrd
--   False
--   </pre>
saturateKB :: (Set PolF2, [PolF2]) -> Heuristics -> Bool
