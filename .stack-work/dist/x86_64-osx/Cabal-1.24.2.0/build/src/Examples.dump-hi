
==================== FINAL INTERFACE ====================
2017-07-17 11:46:36.523952 UTC

interface SAT-Pol-0.1.0.0-CfnMeGgalar5P7rViiH2gc:Examples 8002
  interface hash: 035e96da0a432ac3f8ae8f25c2aa3625
  ABI hash: 8e6fa4fda5f1a3d1426f9fa2d68ccc1b
  export-list hash: 5ed8308408ee2fa4beebee050baaa142
  orphan hash: 104f08f94535ff8e0481e269d13171f0
  flag hash: f6624f22fcdd76ed0ac6625466e2d712
  sig of: Nothing
  used TH splices: False
  where
exports:
  Examples.ej2
  Examples.example
  Examples.exampleSet
  Examples.x1
  Examples.x2
  Examples.x3
  Examples.x4
module dependencies:
package dependencies: HaskellForMaths-0.4.8@HaskellForMaths-0.4.8-8QcC8dcD7HF183G9RK8zU9
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      containers-0.5.10.2@containers-0.5.10.2-BsNvjXoQS1iGZ9xbXaQ0Mz
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: HaskellForMaths-0.4.8@HaskellForMaths-0.4.8-8QcC8dcD7HF183G9RK8zU9:Math.Algebras.Structures
         HaskellForMaths-0.4.8@HaskellForMaths-0.4.8-8QcC8dcD7HF183G9RK8zU9:Math.CommutativeAlgebra.Polynomial
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.10.2@containers-0.5.10.2-BsNvjXoQS1iGZ9xbXaQ0Mz:Data.Set.Internal
import  -/  HaskellForMaths-0.4.8@HaskellForMaths-0.4.8-8QcC8dcD7HF183G9RK8zU9:Math.Algebras.Structures cbf553a388e500de36f995a8d89172a4
import  -/  HaskellForMaths-0.4.8@HaskellForMaths-0.4.8-8QcC8dcD7HF183G9RK8zU9:Math.Algebras.TensorProduct c053039aae50bcc7df2c155eefb8e506
import  -/  HaskellForMaths-0.4.8@HaskellForMaths-0.4.8-8QcC8dcD7HF183G9RK8zU9:Math.Algebras.VectorSpace 6cba24ab7ee9b5f302ba65e0ee801d61
import  -/  HaskellForMaths-0.4.8@HaskellForMaths-0.4.8-8QcC8dcD7HF183G9RK8zU9:Math.CommutativeAlgebra.Polynomial b54042f0d44ec74552e332a486c1ec0b
import  -/  HaskellForMaths-0.4.8@HaskellForMaths-0.4.8-8QcC8dcD7HF183G9RK8zU9:Math.Core.Field 75661b1cf3e7c0e1ab0f62f78c950ef8
import  -/  HaskellForMaths-0.4.8@HaskellForMaths-0.4.8-8QcC8dcD7HF183G9RK8zU9:Math.Core.Utils 5681b0689a2f6e26ea9c0077f1ee1777
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.10.2@containers-0.5.10.2-BsNvjXoQS1iGZ9xbXaQ0Mz:Data.Set 0a21f3925a0d3a5e69c1f4a8e792bc80
import  -/  containers-0.5.10.2@containers-0.5.10.2-BsNvjXoQS1iGZ9xbXaQ0Mz:Data.Set.Internal 0eaafc03eaf1eada07e1d85783ded885
6dbead41527c55384f076bf4dbe34584
  $s$fAlgebrakLex2 :: GHC.Classes.Ord [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fOrd[]_$s$fOrd[]1 -}
4a018a316d05765fcb29dc25096d3dff
  $s$fEqLex ::
    GHC.Classes.Eq
      (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
                  (Math.CommutativeAlgebra.Polynomial.$fEqLex_$c==
                     @ [GHC.Types.Char]
                     Examples.$s$fEqLex_$dEq)
                  (Math.CommutativeAlgebra.Polynomial.$fEqLex_$c/=
                     @ [GHC.Types.Char]
                     Examples.$s$fEqLex_$dEq) -}
b3d743344170f2550446db4bc395c6e6
  $s$fEqLex_$dEq :: GHC.Classes.Eq [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$fEq[]1 -}
e22d412be7090172275eaff8ba9fc168
  $s$fEqVect ::
    GHC.Classes.Eq
      (Math.Algebras.VectorSpace.Vect
         Math.Core.Field.F2
         (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Math.Algebras.VectorSpace.Vect
                       Math.Core.Field.F2
                       (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String))
                  (Math.Algebras.VectorSpace.$fEqVect_$c==
                     @ Math.Core.Field.F2
                     @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                     Examples.$s$fEqVect_$dEq
                     Examples.$s$fEqVect_$s$fOrdLex_$cp1Ord)
                  (Math.Algebras.VectorSpace.$fEqVect_$c/=
                     @ Math.Core.Field.F2
                     @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                     Examples.$s$fEqVect_$dEq
                     Examples.$s$fEqVect_$s$fOrdLex_$cp1Ord) -}
e6d2dffbaf840bd71dbbb8e99590c916
  $s$fEqVect_$dEq :: GHC.Classes.Eq Math.Core.Field.F2
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Math.Core.Field.$fEqF2 -}
65bd7889f389e2066ab782baae1d53f6
  $s$fEqVect_$s$fOrdLex_$cp1Ord ::
    GHC.Classes.Eq
      (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Examples.$s$fEqLex -}
c8d97259edd4d6b5b8c0467ceb747dd3
  $s$fNumVect11 ::
    GHC.Classes.Ord
      (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Examples.$s$fNumVect_$s$fOrdLex -}
7c24668131f54f88ec981063a4885f21
  $s$fNumVect12 ::
    Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(U,U)><S(LS),1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
                   (y :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]) ->
                 case x `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww { Math.CommutativeAlgebra.Polynomial.M ww1 ww2 ->
                 case y `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww3 { Math.CommutativeAlgebra.Polynomial.M ww4 ww5 ->
                 case Math.CommutativeAlgebra.Polynomial.$w$ccompare
                        @ [GHC.Types.Char]
                        GHC.Classes.$fOrd[]_$s$fOrd[]1
                        ww2
                        ww5 of wild {
                   DEFAULT
                   -> ww
                        `cast`
                      (Sym (Math.CommutativeAlgebra.Polynomial.N:Lex[0]) <[GHC.Types.Char]>_N)
                   GHC.Types.GT
                   -> ww3
                        `cast`
                      (Sym (Math.CommutativeAlgebra.Polynomial.N:Lex[0]) <[GHC.Types.Char]>_N) } } }) -}
b8ecd31764f879fa33510c5ebf57bb5a
  $s$fNumVect13 ::
    Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(U,U)><S(LS),1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
                   (y :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]) ->
                 case x `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww { Math.CommutativeAlgebra.Polynomial.M ww1 ww2 ->
                 case y `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww3 { Math.CommutativeAlgebra.Polynomial.M ww4 ww5 ->
                 case Math.CommutativeAlgebra.Polynomial.$w$ccompare
                        @ [GHC.Types.Char]
                        GHC.Classes.$fOrd[]_$s$fOrd[]1
                        ww2
                        ww5 of wild {
                   DEFAULT
                   -> ww3
                        `cast`
                      (Sym (Math.CommutativeAlgebra.Polynomial.N:Lex[0]) <[GHC.Types.Char]>_N)
                   GHC.Types.GT
                   -> ww
                        `cast`
                      (Sym (Math.CommutativeAlgebra.Polynomial.N:Lex[0]) <[GHC.Types.Char]>_N) } } }) -}
944a4213390a923eb67a021bd79106b1
  $s$fNumVect14 ::
    Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(A,1*U)><S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
                   (y :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]) ->
                 case x `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww { Math.CommutativeAlgebra.Polynomial.M ww1 ww2 ->
                 case y `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww3 { Math.CommutativeAlgebra.Polynomial.M ww4 ww5 ->
                 case Math.CommutativeAlgebra.Polynomial.$w$ccompare
                        @ [GHC.Types.Char]
                        GHC.Classes.$fOrd[]_$s$fOrd[]1
                        ww2
                        ww5 of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }) -}
d575db8f1e758317597261d719e0d303
  $s$fNumVect15 ::
    Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(A,1*U)><S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
                   (y :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]) ->
                 case x `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww { Math.CommutativeAlgebra.Polynomial.M ww1 ww2 ->
                 case y `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww3 { Math.CommutativeAlgebra.Polynomial.M ww4 ww5 ->
                 case Math.CommutativeAlgebra.Polynomial.$w$ccompare
                        @ [GHC.Types.Char]
                        GHC.Classes.$fOrd[]_$s$fOrd[]1
                        ww2
                        ww5 of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True } } }) -}
0db999a446897fe37c4095d56e179076
  $s$fNumVect16 ::
    Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(A,1*U)><S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
                   (y :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]) ->
                 case x `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww { Math.CommutativeAlgebra.Polynomial.M ww1 ww2 ->
                 case y `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww3 { Math.CommutativeAlgebra.Polynomial.M ww4 ww5 ->
                 case Math.CommutativeAlgebra.Polynomial.$w$ccompare
                        @ [GHC.Types.Char]
                        GHC.Classes.$fOrd[]_$s$fOrd[]1
                        ww2
                        ww5 of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False } } }) -}
11b1475d21ff5a38abfbcf83614eea97
  $s$fNumVect17 ::
    Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(A,1*U)><S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
                   (y :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]) ->
                 case x `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww { Math.CommutativeAlgebra.Polynomial.M ww1 ww2 ->
                 case y `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww3 { Math.CommutativeAlgebra.Polynomial.M ww4 ww5 ->
                 case Math.CommutativeAlgebra.Polynomial.$w$ccompare
                        @ [GHC.Types.Char]
                        GHC.Classes.$fOrd[]_$s$fOrd[]1
                        ww2
                        ww5 of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True } } }) -}
b30d44024f6dfe33d10c212c24115f28
  $s$fNumVect2 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
      Math.Core.Field.F2)]
  {- Unfolding: (GHC.Types.:
                   @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                      Math.Core.Field.F2)
                   Examples.$s$fNumVect3
                   (GHC.Types.[]
                      @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                         Math.Core.Field.F2))) -}
d2512bdba0515135200e0bfada1791fd
  $s$fNumVect3 ::
    (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
     Math.Core.Field.F2)
  {- Unfolding: (((Math.CommutativeAlgebra.Polynomial.$fAlgebrakGlex1
                     @ [GHC.Types.Char])
                    `cast`
                  (Sym (Math.CommutativeAlgebra.Polynomial.N:Lex[0]) <[GHC.Types.Char]>_N),
                  Examples.$s$fNumVect4)) -}
ef8f6515105089574409e872d3959702
  $s$fNumVect4 :: Math.Core.Field.F2
  {- Unfolding: (case GHC.Classes.modInt# 1# 2# of ww2 { DEFAULT ->
                 (GHC.Types.I# ww2) `cast` (Sym (Math.Core.Field.N:F2[0])) }) -}
21f5f197786f681d74b9b4e09b5c7598
  $s$fNumVect7 ::
    Math.Algebras.VectorSpace.Vect
      Math.Core.Field.F2
      (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
    -> Math.Algebras.VectorSpace.Vect
         Math.Core.Field.F2
         (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
    -> Math.Algebras.VectorSpace.Vect
         Math.Core.Field.F2
         (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Math.Algebras.VectorSpace.Vect
                           Math.Core.Field.F2
                           (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String))
                   (y :: Math.Algebras.VectorSpace.Vect
                           Math.Core.Field.F2
                           (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)) ->
                 Math.CommutativeAlgebra.Polynomial.$w$cmult2
                   @ Math.Core.Field.F2
                   @ [GHC.Types.Char]
                   Math.Core.Field.$fEqF2
                   Math.Core.Field.$fNumF2
                   GHC.Classes.$fOrd[]_$s$fOrd[]1
                   (Math.Algebras.TensorProduct.reify1
                      @ Math.Core.Field.F2
                      @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                      @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                      Math.Core.Field.$fNumF2
                      x
                      y)
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
                               Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)>_R))) -}
27f3d928c1367442ff59122dab4f95ef
  $s$fNumVect_$s$fOrdLex ::
    GHC.Classes.Ord
      (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
                  Examples.$s$fEqVect_$s$fOrdLex_$cp1Ord
                  (Math.CommutativeAlgebra.Polynomial.$fOrdLex_$ccompare
                     @ [GHC.Types.Char]
                     Examples.$s$fAlgebrakLex2)
                  Examples.$s$fNumVect17
                  Examples.$s$fNumVect16
                  Examples.$s$fNumVect15
                  Examples.$s$fNumVect14
                  Examples.$s$fNumVect13
                  Examples.$s$fNumVect12 -}
953822b62cb28930e39fe0ba1ca2363b
  $s$fOrdVect ::
    GHC.Classes.Ord
      (Math.Algebras.VectorSpace.Vect
         Math.Core.Field.F2
         (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Math.Algebras.VectorSpace.Vect
                       Math.Core.Field.F2
                       (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String))
                  Examples.$s$fOrdVect_$s$fOrdVect_$cp1Ord
                  (Math.Algebras.VectorSpace.$fOrdVect_$ccompare
                     @ Math.Core.Field.F2
                     @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                     Math.Core.Field.$fOrdF2
                     Examples.$s$fNumVect11)
                  (Math.Algebras.VectorSpace.$fOrdVect_$c<
                     @ Math.Core.Field.F2
                     @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                     Math.Core.Field.$fOrdF2
                     Examples.$s$fNumVect11)
                  (Math.Algebras.VectorSpace.$fOrdVect_$c<=
                     @ Math.Core.Field.F2
                     @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                     Math.Core.Field.$fOrdF2
                     Examples.$s$fNumVect11)
                  (Math.Algebras.VectorSpace.$fOrdVect_$c>
                     @ Math.Core.Field.F2
                     @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                     Math.Core.Field.$fOrdF2
                     Examples.$s$fNumVect11)
                  (Math.Algebras.VectorSpace.$fOrdVect_$c>=
                     @ Math.Core.Field.F2
                     @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                     Math.Core.Field.$fOrdF2
                     Examples.$s$fNumVect11)
                  (Math.Algebras.VectorSpace.$fOrdVect_$cmax
                     @ Math.Core.Field.F2
                     @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                     Math.Core.Field.$fOrdF2
                     Examples.$s$fNumVect11)
                  (Math.Algebras.VectorSpace.$fOrdVect_$cmin
                     @ Math.Core.Field.F2
                     @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                     Math.Core.Field.$fOrdF2
                     Examples.$s$fNumVect11) -}
4dfec5831919fb54055b185e9f3520b5
  $s$fOrdVect_$s$fOrdVect_$cp1Ord ::
    GHC.Classes.Eq
      (Math.Algebras.VectorSpace.Vect
         Math.Core.Field.F2
         (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Examples.$s$fEqVect -}
9036d2997ec53245c448b9d8849ce0c5
  $s^ ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> Math.CommutativeAlgebra.Polynomial.LexPoly
         Math.Core.Field.F2 GHC.Base.String
  {- Arity: 2, Strictness: <L,U><S,U>, Inline: [1],
     Unfolding: (\ (eta :: Math.CommutativeAlgebra.Polynomial.LexPoly
                             Math.Core.Field.F2 GHC.Base.String)
                   (eta1 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.ltInteger#
                        eta1
                        Examples.$s^3 of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False
                   -> case GHC.Integer.Type.eqInteger#
                             eta1
                             Examples.$s^3 of wild2 { DEFAULT ->
                      case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                        GHC.Types.False -> Examples.$s^_f eta eta1
                        GHC.Types.True -> Examples.$s^2 } }
                   GHC.Types.True -> Examples.$s^1 } }) -}
4ce7ea6debfc92a45d06551ba6ce4882
  $s^1 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Strictness: x -}
112b2231ad6e8cd2277aa08d0c58c0a1
  $s^2 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Unfolding: (case GHC.Classes.modInt# 0# 2# of ww2 { DEFAULT ->
                 case GHC.Classes.modInt# 1# 2# of ww1 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww1 ww2) of wild {
                   GHC.Types.False
                   -> letrec {
                        go :: [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                Math.Core.Field.F2)]
                              -> [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                   Math.Core.Field.F2)]
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds2 :: [(Math.CommutativeAlgebra.Polynomial.Lex
                                        [GHC.Types.Char],
                                      Math.Core.Field.F2)]) ->
                          case ds2 of wild1 {
                            []
                            -> GHC.Types.[]
                                 @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                    Math.Core.Field.F2)
                            : y ys
                            -> case y of wild2 { (,) ei xi ->
                               GHC.Types.:
                                 @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                    Math.Core.Field.F2)
                                 (ei,
                                  case xi
                                         `cast`
                                       (Math.Core.Field.N:F2[0]) of wild4 { GHC.Types.I# y1 ->
                                  (GHC.Types.I# (GHC.Prim.*# ww1 y1))
                                    `cast`
                                  (Sym (Math.Core.Field.N:F2[0])) })
                                 (go ys) } }
                      } in
                      (go Examples.$s$fNumVect2)
                        `cast`
                      (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                                <Math.Core.Field.F2>_R
                                <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))
                   GHC.Types.True
                   -> (GHC.Types.[]
                         @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                            Math.Core.Field.F2))
                        `cast`
                      (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                                <Math.Core.Field.F2>_R
                                <Math.CommutativeAlgebra.Polynomial.Lex
                                   [GHC.Types.Char]>_R)) } } }) -}
27dc004e9d98d4d1595f23e3c43e4e94
  $s^3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
0b5b0b7f9eb7197c375e23b1b5aba18e
  $s^_f ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> Math.CommutativeAlgebra.Polynomial.LexPoly
         Math.Core.Field.F2 GHC.Base.String
  {- Arity: 2, Strictness: <L,U><S,U> -}
deef99668906672f4c900c0124c4bed2
  $seven1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
f420436a850e097bdeb75158fc3ad022
  $sfromList ::
    [Math.CommutativeAlgebra.Polynomial.LexPoly
       Math.Core.Field.F2 GHC.Base.String]
    -> Data.Set.Internal.Set
         (Math.CommutativeAlgebra.Polynomial.LexPoly
            Math.Core.Field.F2 GHC.Base.String)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Math.CommutativeAlgebra.Polynomial.LexPoly
                             Math.Core.Field.F2 GHC.Base.String]) ->
                 case ds of wild {
                   []
                   -> Data.Set.Internal.Tip
                        @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                             Math.Core.Field.F2 GHC.Base.String)
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x `cast`
                                (Math.Algebras.VectorSpace.N:Vect[0]
                                     <Math.Core.Field.F2>_R
                                     <Math.CommutativeAlgebra.Polynomial.Lex
                                        GHC.Base.String>_R) of nt { DEFAULT ->
                           Data.Set.Internal.Bin
                             @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                                  Math.Core.Field.F2 GHC.Base.String)
                             1#
                             nt
                               `cast`
                             (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                                       <Math.Core.Field.F2>_R
                                       <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R))
                             (Data.Set.Internal.Tip
                                @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                                     Math.Core.Field.F2 GHC.Base.String))
                             (Data.Set.Internal.Tip
                                @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                                     Math.Core.Field.F2 GHC.Base.String)) }
                        : ipv ipv1
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
                                     Math.Core.Field.F2)
                                  Examples.$sfromList_$dOrd2
                                  x `cast`
                                  (Math.Algebras.VectorSpace.N:Vect[0]
                                       <Math.Core.Field.F2>_R
                                       <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R)
                                  ipv
                                    `cast`
                                  (Math.Algebras.VectorSpace.N:Vect[0]
                                       <Math.Core.Field.F2>_R
                                       <Math.CommutativeAlgebra.Polynomial.Lex
                                          GHC.Base.String>_R) of wild2 {
                             DEFAULT
                             -> case x `cast`
                                     (Math.Algebras.VectorSpace.N:Vect[0]
                                          <Math.Core.Field.F2>_R
                                          <Math.CommutativeAlgebra.Polynomial.Lex
                                             GHC.Base.String>_R) of nt { DEFAULT ->
                                Examples.$sfromList_go5
                                  (Data.Set.Internal.Bin
                                     @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                                          Math.Core.Field.F2 GHC.Base.String)
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                                               <Math.Core.Field.F2>_R
                                               <Math.CommutativeAlgebra.Polynomial.Lex
                                                  GHC.Base.String>_R))
                                     (Data.Set.Internal.Tip
                                        @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                                             Math.Core.Field.F2 GHC.Base.String))
                                     (Data.Set.Internal.Tip
                                        @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                                             Math.Core.Field.F2 GHC.Base.String)))
                                  wild1 }
                             GHC.Types.LT
                             -> case x `cast`
                                     (Math.Algebras.VectorSpace.N:Vect[0]
                                          <Math.Core.Field.F2>_R
                                          <Math.CommutativeAlgebra.Polynomial.Lex
                                             GHC.Base.String>_R) of nt { DEFAULT ->
                                Examples.$wgo5
                                  1#
                                  (Data.Set.Internal.Bin
                                     @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                                          Math.Core.Field.F2 GHC.Base.String)
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                                               <Math.Core.Field.F2>_R
                                               <Math.CommutativeAlgebra.Polynomial.Lex
                                                  GHC.Base.String>_R))
                                     (Data.Set.Internal.Tip
                                        @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                                             Math.Core.Field.F2 GHC.Base.String))
                                     (Data.Set.Internal.Tip
                                        @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                                             Math.Core.Field.F2 GHC.Base.String)))
                                  wild1 } } } }) -}
8e334a1e4200e05d095f3d6097c17784
  $sfromList_$dOrd2 ::
    GHC.Classes.Ord
      (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
       Math.Core.Field.F2)
  {- Unfolding: (GHC.Classes.$fOrd(,)
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   @ Math.Core.Field.F2
                   Examples.$s$fNumVect_$s$fOrdLex
                   Math.Core.Field.$fOrdF2) -}
707c5fefe736a70346a1f973ab680fc5
  $sfromList_go5 ::
    Data.Set.Internal.Set
      (Math.CommutativeAlgebra.Polynomial.LexPoly
         Math.Core.Field.F2 GHC.Base.String)
    -> [Math.CommutativeAlgebra.Polynomial.LexPoly
          Math.Core.Field.F2 GHC.Base.String]
    -> Data.Set.Internal.Set
         (Math.CommutativeAlgebra.Polynomial.LexPoly
            Math.Core.Field.F2 GHC.Base.String)
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
addb20967fbc97bf7c80cffbda81c6f4
  $sinsert_go5 ::
    GHC.Classes.Ord a1 =>
    a1 -> a1 -> Data.Set.Internal.Set a1 -> Data.Set.Internal.Set a1
  {- Arity: 4,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U><S,1*U><S,1*U> -}
d6b9b78bbd99610c68f16ca3fd51898c
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Examples.$trModule2
                   Examples.$trModule1) -}
98dab85fff217bcd8b5dc86dfbfcac89
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Examples"#) -}
737db1cd10536b3af5abb13a8919a6b6
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "SAT-Pol-0.1.0.0-CfnMeGgalar5P7rViiH2gc"#) -}
143800ac2390d280fad088012287261d
  $wgo5 ::
    GHC.Prim.Int#
    -> Data.Set.Internal.Set
         (Math.CommutativeAlgebra.Polynomial.LexPoly
            Math.Core.Field.F2 GHC.Base.String)
    -> [Math.CommutativeAlgebra.Polynomial.LexPoly
          Math.Core.Field.F2 GHC.Base.String]
    -> Data.Set.Internal.Set
         (Math.CommutativeAlgebra.Polynomial.LexPoly
            Math.Core.Field.F2 GHC.Base.String)
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
7bc04c7f6a4e7d4ca44b4403055936dd
  ej1 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.VectorSpace.addmerge
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fEqF2
                   Math.Core.Field.$fNumF2
                   Examples.$s$fNumVect_$s$fOrdLex
                   Examples.ej22
                   Examples.ej3
                     `cast`
                   (Math.Algebras.VectorSpace.N:Vect[0]
                        <Math.Core.Field.F2>_R
                        <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R)) -}
cbc7c79cb9c05167676258b5685059cf
  ej10 :: [([GHC.Types.Char], GHC.Types.Int)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Int)
                   Examples.ej11
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.Types.Int))) -}
245741d56ceaf7ff0ea57f7f96fdcce5
  ej11 :: ([GHC.Types.Char], GHC.Types.Int)
  {- Strictness: m,
     Unfolding: ((Examples.ej12,
                  Math.CommutativeAlgebra.Polynomial.$fMonomialConstructorGlex1)) -}
87158cdd7b592ff000b2e2667b487e22
  ej12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "x2"#) -}
f940932e3369db75c58b2aeb473bcb98
  ej13 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Unfolding: (Examples.$s^
                   Examples.ej15
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))
                   Examples.ej14) -}
05c4cfd4edc4c6215ecd1e2ffeaa7c56
  ej14 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (34) -}
67d5f035e100eddc85e4cc5332982c04
  ej15 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
      Math.Core.Field.F2)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                      Math.Core.Field.F2)
                   Examples.ej16
                   (GHC.Types.[]
                      @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                         Math.Core.Field.F2))) -}
a446d658926c85bb85055ed3eb33469b
  ej16 ::
    (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
     Math.Core.Field.F2)
  {- Strictness: m,
     Unfolding: ((Examples.ej17
                    `cast`
                  (Sym (Math.CommutativeAlgebra.Polynomial.N:Lex[0]) <[GHC.Types.Char]>_N),
                  Examples.$s$fNumVect4)) -}
683a7a119cae0352f2709fb1f0187a16
  ej17 :: Math.CommutativeAlgebra.Polynomial.MonImpl [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: (Math.CommutativeAlgebra.Polynomial.M
                   @ [GHC.Types.Char]
                   Math.CommutativeAlgebra.Polynomial.$fMonomialConstructorGlex1
                   Examples.ej18) -}
ad07d3e060e2ff9250b927cec411ec1b
  ej18 :: [([GHC.Types.Char], GHC.Types.Int)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Int)
                   Examples.ej19
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.Types.Int))) -}
8e616f4e80c3a6eef0245e7b6c523bfe
  ej19 :: ([GHC.Types.Char], GHC.Types.Int)
  {- Strictness: m,
     Unfolding: ((Examples.ej20,
                  Math.CommutativeAlgebra.Polynomial.$fMonomialConstructorGlex1)) -}
c1890b1cfe2a3d7f512897bd1d2d0eb7
  ej2 ::
    Math.Algebras.VectorSpace.Vect
      Math.Core.Field.F2
      (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
  {- Unfolding: InlineRule (0, True, True)
                Examples.ej1
                  `cast`
                (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                          <Math.Core.Field.F2>_R
                          <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R)) -}
4635b288f0135bd477a0119fe40cde32
  ej20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "x1"#) -}
50fb5d0f6ebfeefa87e200e4d2a07d08
  ej21 ::
    Math.Algebras.VectorSpace.Vect
      Math.Core.Field.F2
      (Math.Algebras.TensorProduct.Tensor
         (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
         (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]))
    -> Math.Algebras.VectorSpace.Vect
         Math.Core.Field.F2
         (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Unfolding: (Math.CommutativeAlgebra.Polynomial.$w$cmult2
                   @ Math.Core.Field.F2
                   @ [GHC.Types.Char]
                   Math.Core.Field.$fEqF2
                   Math.Core.Field.$fNumF2
                   GHC.Classes.$fOrd[]_$s$fOrd[]1) -}
1b70bf9d081d1fcc5e8ea9e88e2c693c
  ej22 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.VectorSpace.addmerge
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fEqF2
                   Math.Core.Field.$fNumF2
                   Examples.$s$fNumVect_$s$fOrdLex
                   Examples.ej23
                     `cast`
                   (Math.Algebras.VectorSpace.N:Vect[0]
                        <Math.Core.Field.F2>_R
                        <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R)
                   Examples.ej15) -}
4b130a7c7e14373a7b7f71a3a7882cf2
  ej23 ::
    Math.Algebras.VectorSpace.Vect
      Math.Core.Field.F2
      (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Unfolding: (Examples.ej21
                   Examples.ej24
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
                               Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)>_R))) -}
24398ea7ac8cf846fb55f06ac7436b29
  ej24 ::
    [((Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
       Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String),
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.TensorProduct.reify1
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fNumF2
                   Examples.ej31
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))
                   Examples.ej25) -}
cd40598ad69006e796f6cd528e63aadb
  ej25 ::
    Math.Algebras.VectorSpace.Vect
      Math.Core.Field.F2
      (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Unfolding: (Examples.ej21
                   Examples.ej26
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
                               Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)>_R))) -}
f997ecd8e1d111ef686ed348103f6da0
  ej26 ::
    [((Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
       Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String),
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.TensorProduct.reify1
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fNumF2
                   Examples.ej27
                   Examples.ej7
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))) -}
e91adcfe13b0472add417b83fbf9c426
  ej27 ::
    Math.Algebras.VectorSpace.Vect
      Math.Core.Field.F2
      (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Unfolding: (Examples.ej21
                   Examples.ej28
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
                               Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)>_R))) -}
9c3b85ca722961878d51f5c8f640ab94
  ej28 ::
    [((Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
       Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String),
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.TensorProduct.reify1
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fNumF2
                   Examples.ej29
                   Examples.ej7
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))) -}
4277a8e5b723f17ba7d8c12f3400fb0b
  ej29 ::
    Math.Algebras.VectorSpace.Vect
      Math.Core.Field.F2
      (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Unfolding: (Examples.ej21
                   Examples.ej30
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
                               Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)>_R))) -}
bfac32ab86338a78bed180d07c6249a7
  ej3 ::
    Math.Algebras.VectorSpace.Vect
      Math.Core.Field.F2
      (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Unfolding: (Examples.ej21
                   Examples.ej4
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
                               Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)>_R))) -}
ea642a89e07f9f9371c86beb0d8aa039
  ej30 ::
    [((Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
       Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String),
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.TensorProduct.reify1
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fNumF2
                   Examples.ej7
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))
                   Examples.ej7
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))) -}
30689909f6a6cb480ee4a6dce6dc533d
  ej31 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
      Math.Core.Field.F2)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                      Math.Core.Field.F2)
                   Examples.ej32
                   (GHC.Types.[]
                      @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                         Math.Core.Field.F2))) -}
d86f023b9a9ae2d340b4c1480ba38d1c
  ej32 ::
    (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
     Math.Core.Field.F2)
  {- Strictness: m,
     Unfolding: ((Examples.ej33
                    `cast`
                  (Sym (Math.CommutativeAlgebra.Polynomial.N:Lex[0]) <[GHC.Types.Char]>_N),
                  Examples.$s$fNumVect4)) -}
ecf95ba0764fb7cc41a65e940f0e1cbf
  ej33 :: Math.CommutativeAlgebra.Polynomial.MonImpl [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: (Math.CommutativeAlgebra.Polynomial.M
                   @ [GHC.Types.Char]
                   Math.CommutativeAlgebra.Polynomial.$fMonomialConstructorGlex1
                   Examples.ej34) -}
f983d9087f9f89d17453eb409a9c37ec
  ej34 :: [([GHC.Types.Char], GHC.Types.Int)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Int)
                   Examples.ej35
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.Types.Int))) -}
90198fadb3be4a71cb436673f586e1ce
  ej35 :: ([GHC.Types.Char], GHC.Types.Int)
  {- Strictness: m,
     Unfolding: ((Examples.ej36,
                  Math.CommutativeAlgebra.Polynomial.$fMonomialConstructorGlex1)) -}
89d28bbfe8afc51724d6f32d5c23c449
  ej36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "x4"#) -}
ec13476606b0411a5b8508394843b896
  ej4 ::
    [((Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
       Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String),
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.TensorProduct.reify1
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fNumF2
                   Examples.ej13
                   Examples.ej5) -}
bd327c106f0d0856b99719e97320c86f
  ej5 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Unfolding: (Examples.$s^
                   Examples.ej7
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))
                   Examples.ej6) -}
7cfb503c08cb58612e82ed557368fee4
  ej6 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (12) -}
65e50950fee58796ac516dc676478c14
  ej7 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
      Math.Core.Field.F2)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                      Math.Core.Field.F2)
                   Examples.ej8
                   (GHC.Types.[]
                      @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                         Math.Core.Field.F2))) -}
3b4281b7d8de329f4b792563e9e4d447
  ej8 ::
    (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
     Math.Core.Field.F2)
  {- Strictness: m,
     Unfolding: ((Examples.ej9
                    `cast`
                  (Sym (Math.CommutativeAlgebra.Polynomial.N:Lex[0]) <[GHC.Types.Char]>_N),
                  Examples.$s$fNumVect4)) -}
4ffbccabb1fab56e53321e1156319faf
  ej9 :: Math.CommutativeAlgebra.Polynomial.MonImpl [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: (Math.CommutativeAlgebra.Polynomial.M
                   @ [GHC.Types.Char]
                   Math.CommutativeAlgebra.Polynomial.$fMonomialConstructorGlex1
                   Examples.ej10) -}
c5029db6791b38e3ff983a88f80c3c69
  example ::
    [Math.CommutativeAlgebra.Polynomial.LexPoly
       Math.Core.Field.F2 GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                        Math.Core.Field.F2 GHC.Base.String)
                   Examples.$s^2
                   Examples.example1) -}
dfb231a0d2fbb88c05f5cb6c122c2e44
  example1 ::
    [Math.CommutativeAlgebra.Polynomial.LexPoly
       Math.Core.Field.F2 GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                        Math.Core.Field.F2 GHC.Base.String)
                   Examples.example12
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R))
                   Examples.example2) -}
1a5d12ff14bbaeadaefc57b6e51f39e2
  example10 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Unfolding: (case GHC.Classes.modInt# 0# 2# of ww2 { DEFAULT ->
                 case GHC.Classes.modInt# 1# 2# of ww1 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww1 ww2) of wild {
                   GHC.Types.False
                   -> letrec {
                        go :: [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                Math.Core.Field.F2)]
                              -> [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                   Math.Core.Field.F2)]
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds2 :: [(Math.CommutativeAlgebra.Polynomial.Lex
                                        [GHC.Types.Char],
                                      Math.Core.Field.F2)]) ->
                          case ds2 of wild1 {
                            []
                            -> GHC.Types.[]
                                 @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                    Math.Core.Field.F2)
                            : y ys
                            -> case y of wild2 { (,) ei xi ->
                               GHC.Types.:
                                 @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                    Math.Core.Field.F2)
                                 (ei,
                                  case xi
                                         `cast`
                                       (Math.Core.Field.N:F2[0]) of wild4 { GHC.Types.I# y1 ->
                                  (GHC.Types.I# (GHC.Prim.*# ww1 y1))
                                    `cast`
                                  (Sym (Math.Core.Field.N:F2[0])) })
                                 (go ys) } }
                      } in
                      (Math.Algebras.VectorSpace.addmerge
                         @ Math.Core.Field.F2
                         @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                         Math.Core.Field.$fEqF2
                         Math.Core.Field.$fNumF2
                         Examples.$s$fNumVect_$s$fOrdLex
                         Examples.example11
                         (go Examples.$s$fNumVect2))
                        `cast`
                      (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                                <Math.Core.Field.F2>_R
                                <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R))
                   GHC.Types.True
                   -> (Math.Algebras.VectorSpace.addmerge
                         @ Math.Core.Field.F2
                         @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                         Math.Core.Field.$fEqF2
                         Math.Core.Field.$fNumF2
                         Examples.$s$fNumVect_$s$fOrdLex
                         Examples.example11
                         (GHC.Types.[]
                            @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                               Math.Core.Field.F2)))
                        `cast`
                      (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                                <Math.Core.Field.F2>_R
                                <Math.CommutativeAlgebra.Polynomial.Lex
                                   GHC.Base.String>_R)) } } }) -}
ae579fad07e121b89ca774f17499fd38
  example11 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.VectorSpace.addmerge
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fEqF2
                   Math.Core.Field.$fNumF2
                   Examples.$s$fNumVect_$s$fOrdLex
                   Examples.example7
                     `cast`
                   (Math.Algebras.VectorSpace.N:Vect[0]
                        <Math.Core.Field.F2>_R
                        <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R)
                   Examples.ej15) -}
2157b1e2074aa51d5889c76bf2e3752f
  example12 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.VectorSpace.addmerge
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fEqF2
                   Math.Core.Field.$fNumF2
                   Examples.$s$fNumVect_$s$fOrdLex
                   Examples.example11
                   Examples.ej7) -}
ee933bca19399000fc7ed95f5433b2be
  example2 ::
    [Math.CommutativeAlgebra.Polynomial.LexPoly
       Math.Core.Field.F2 GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                        Math.Core.Field.F2 GHC.Base.String)
                   Examples.example10
                   Examples.example3) -}
3f0477e757d6a026c538d15920a6b673
  example3 ::
    [Math.CommutativeAlgebra.Polynomial.LexPoly
       Math.Core.Field.F2 GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                        Math.Core.Field.F2 GHC.Base.String)
                   Examples.example9
                   Examples.example4) -}
b3d26fd9b5b5096531b8031b7679fa75
  example4 ::
    [Math.CommutativeAlgebra.Polynomial.LexPoly
       Math.Core.Field.F2 GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                        Math.Core.Field.F2 GHC.Base.String)
                   Examples.example5
                   (GHC.Types.[]
                      @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                           Math.Core.Field.F2 GHC.Base.String))) -}
f25fcbbbd9bf55694961efe76a9f4cf0
  example5 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Unfolding: (case GHC.Classes.modInt# 0# 2# of ww2 { DEFAULT ->
                 case GHC.Classes.modInt# 1# 2# of ww1 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww1 ww2) of wild {
                   GHC.Types.False
                   -> letrec {
                        go :: [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                Math.Core.Field.F2)]
                              -> [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                   Math.Core.Field.F2)]
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds2 :: [(Math.CommutativeAlgebra.Polynomial.Lex
                                        [GHC.Types.Char],
                                      Math.Core.Field.F2)]) ->
                          case ds2 of wild1 {
                            []
                            -> GHC.Types.[]
                                 @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                    Math.Core.Field.F2)
                            : y ys
                            -> case y of wild2 { (,) ei xi ->
                               GHC.Types.:
                                 @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                    Math.Core.Field.F2)
                                 (ei,
                                  case xi
                                         `cast`
                                       (Math.Core.Field.N:F2[0]) of wild4 { GHC.Types.I# y1 ->
                                  (GHC.Types.I# (GHC.Prim.*# ww1 y1))
                                    `cast`
                                  (Sym (Math.Core.Field.N:F2[0])) })
                                 (go ys) } }
                      } in
                      (Math.Algebras.VectorSpace.addmerge
                         @ Math.Core.Field.F2
                         @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                         Math.Core.Field.$fEqF2
                         Math.Core.Field.$fNumF2
                         Examples.$s$fNumVect_$s$fOrdLex
                         Examples.example6
                         (go Examples.$s$fNumVect2))
                        `cast`
                      (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                                <Math.Core.Field.F2>_R
                                <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R))
                   GHC.Types.True
                   -> (Math.Algebras.VectorSpace.addmerge
                         @ Math.Core.Field.F2
                         @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                         Math.Core.Field.$fEqF2
                         Math.Core.Field.$fNumF2
                         Examples.$s$fNumVect_$s$fOrdLex
                         Examples.example6
                         (GHC.Types.[]
                            @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                               Math.Core.Field.F2)))
                        `cast`
                      (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                                <Math.Core.Field.F2>_R
                                <Math.CommutativeAlgebra.Polynomial.Lex
                                   GHC.Base.String>_R)) } } }) -}
b8b92ee2a8155d33d43a9b153778c114
  example6 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.VectorSpace.addmerge
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fEqF2
                   Math.Core.Field.$fNumF2
                   Examples.$s$fNumVect_$s$fOrdLex
                   Examples.example7
                     `cast`
                   (Math.Algebras.VectorSpace.N:Vect[0]
                        <Math.Core.Field.F2>_R
                        <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R)
                   Examples.ej7) -}
05cd9a0dd73e36e1749c1def4e8f7a8a
  example7 ::
    Math.Algebras.VectorSpace.Vect
      Math.Core.Field.F2
      (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Unfolding: (Examples.ej21
                   Examples.example8
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
                               Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)>_R))) -}
11961794a3568e2bc11950af9d5c665e
  example8 ::
    [((Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
       Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String),
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.TensorProduct.reify1
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fNumF2
                   Examples.ej15
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))
                   Examples.ej7
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))) -}
8be0ed212501508718ce7c996c7b9273
  example9 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Unfolding: (case GHC.Classes.modInt# 0# 2# of ww2 { DEFAULT ->
                 case GHC.Classes.modInt# 1# 2# of ww1 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww1 ww2) of wild {
                   GHC.Types.False
                   -> letrec {
                        go :: [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                Math.Core.Field.F2)]
                              -> [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                   Math.Core.Field.F2)]
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds2 :: [(Math.CommutativeAlgebra.Polynomial.Lex
                                        [GHC.Types.Char],
                                      Math.Core.Field.F2)]) ->
                          case ds2 of wild1 {
                            []
                            -> GHC.Types.[]
                                 @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                    Math.Core.Field.F2)
                            : y ys
                            -> case y of wild2 { (,) ei xi ->
                               GHC.Types.:
                                 @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                    Math.Core.Field.F2)
                                 (ei,
                                  case xi
                                         `cast`
                                       (Math.Core.Field.N:F2[0]) of wild4 { GHC.Types.I# y1 ->
                                  (GHC.Types.I# (GHC.Prim.*# ww1 y1))
                                    `cast`
                                  (Sym (Math.Core.Field.N:F2[0])) })
                                 (go ys) } }
                      } in
                      (Math.Algebras.VectorSpace.addmerge
                         @ Math.Core.Field.F2
                         @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                         Math.Core.Field.$fEqF2
                         Math.Core.Field.$fNumF2
                         Examples.$s$fNumVect_$s$fOrdLex
                         Examples.example7
                           `cast`
                         (Math.Algebras.VectorSpace.N:Vect[0]
                              <Math.Core.Field.F2>_R
                              <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R)
                         (go Examples.$s$fNumVect2))
                        `cast`
                      (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                                <Math.Core.Field.F2>_R
                                <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R))
                   GHC.Types.True
                   -> (Math.Algebras.VectorSpace.addmerge
                         @ Math.Core.Field.F2
                         @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                         Math.Core.Field.$fEqF2
                         Math.Core.Field.$fNumF2
                         Examples.$s$fNumVect_$s$fOrdLex
                         Examples.example7
                           `cast`
                         (Math.Algebras.VectorSpace.N:Vect[0]
                              <Math.Core.Field.F2>_R
                              <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R)
                         (GHC.Types.[]
                            @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                               Math.Core.Field.F2)))
                        `cast`
                      (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                                <Math.Core.Field.F2>_R
                                <Math.CommutativeAlgebra.Polynomial.Lex
                                   GHC.Base.String>_R)) } } }) -}
13d56b71decc37d2639c842e15ca1bb1
  exampleSet ::
    Data.Set.Internal.Set
      (Math.CommutativeAlgebra.Polynomial.LexPoly
         Math.Core.Field.F2 GHC.Base.String)
  {- Unfolding: (Examples.$sfromList Examples.example) -}
25a1325f8762a23628e915771637ed5a
  x1 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Examples.ej15
                  `cast`
                (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                          <Math.Core.Field.F2>_R
                          <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R)) -}
ae126b4cc75e7d5a5c46f1fa8c7c4ef3
  x10 :: [([GHC.Types.Char], GHC.Types.Int)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Int)
                   Examples.x11
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.Types.Int))) -}
e68fc887d517a8124112fd1128bb8424
  x11 :: ([GHC.Types.Char], GHC.Types.Int)
  {- Strictness: m,
     Unfolding: ((Examples.x12,
                  Math.CommutativeAlgebra.Polynomial.$fMonomialConstructorGlex1)) -}
01ffc2eafe779433b8a21f10591dae3c
  x12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "x3"#) -}
7846ed6e3b3a736ee300290870afa5ef
  x2 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Examples.ej7
                  `cast`
                (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                          <Math.Core.Field.F2>_R
                          <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R)) -}
c61d47192747ad0fb535956e1b51da22
  x3 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Examples.x7
                  `cast`
                (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                          <Math.Core.Field.F2>_R
                          <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R)) -}
737edf2da0c72741280eb53e66f0fb3d
  x4 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Examples.ej31
                  `cast`
                (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                          <Math.Core.Field.F2>_R
                          <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R)) -}
cc0e8ad7356cc954bdc901875679cfbf
  x7 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
      Math.Core.Field.F2)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                      Math.Core.Field.F2)
                   Examples.x8
                   (GHC.Types.[]
                      @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                         Math.Core.Field.F2))) -}
e21ee399488f2f5fa7f19e65910bcdde
  x8 ::
    (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
     Math.Core.Field.F2)
  {- Strictness: m,
     Unfolding: ((Examples.x9
                    `cast`
                  (Sym (Math.CommutativeAlgebra.Polynomial.N:Lex[0]) <[GHC.Types.Char]>_N),
                  Examples.$s$fNumVect4)) -}
9ece15b2adb5449cacab1c51f4ff2d31
  x9 :: Math.CommutativeAlgebra.Polynomial.MonImpl [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: (Math.CommutativeAlgebra.Polynomial.M
                   @ [GHC.Types.Char]
                   Math.CommutativeAlgebra.Polynomial.$fMonomialConstructorGlex1
                   Examples.x10) -}
"SPEC/Examples $fEqLex @ [Char]" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                            [GHC.Types.Char])
  Math.CommutativeAlgebra.Polynomial.$fEqLex @ [GHC.Types.Char] $dEq
  = Examples.$s$fEqLex
"SPEC/Examples $fEqVect @ F2 @ (Lex String)" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                         (Math.CommutativeAlgebra.Polynomial.Lex
                                                                            GHC.Base.String))
                                                             ($dEq :: GHC.Classes.Eq
                                                                        Math.Core.Field.F2)
  Math.Algebras.VectorSpace.$fEqVect @ Math.Core.Field.F2
                                     @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                                     $dEq
                                     $dEq1
  = Examples.$s$fEqVect
"SPEC/Examples $fOrdLex @ [Char]" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                              [GHC.Types.Char])
  Math.CommutativeAlgebra.Polynomial.$fOrdLex @ [GHC.Types.Char]
                                              $dOrd
  = Examples.$s$fNumVect_$s$fOrdLex
"SPEC/Examples $fOrdLex_$cp1Ord @ [Char]" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                      [GHC.Types.Char])
  Math.CommutativeAlgebra.Polynomial.$fOrdLex_$cp1Ord @ [GHC.Types.Char]
                                                      $dOrd
  = Examples.$s$fEqVect_$s$fOrdLex_$cp1Ord
"SPEC/Examples $fOrdVect @ F2 @ (Lex String)" [ALWAYS] forall ($dOrd1 :: GHC.Classes.Ord
                                                                           (Math.CommutativeAlgebra.Polynomial.Lex
                                                                              GHC.Base.String))
                                                              ($dOrd :: GHC.Classes.Ord
                                                                          Math.Core.Field.F2)
  Math.Algebras.VectorSpace.$fOrdVect @ Math.Core.Field.F2
                                      @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                                      $dOrd
                                      $dOrd1
  = Examples.$s$fOrdVect
"SPEC/Examples $fOrdVect_$cp1Ord @ F2 @ (Lex String)" [ALWAYS] forall ($dOrd1 :: GHC.Classes.Ord
                                                                                   (Math.CommutativeAlgebra.Polynomial.Lex
                                                                                      GHC.Base.String))
                                                                      ($dOrd :: GHC.Classes.Ord
                                                                                  Math.Core.Field.F2)
  Math.Algebras.VectorSpace.$fOrdVect_$cp1Ord @ Math.Core.Field.F2
                                              @ (Math.CommutativeAlgebra.Polynomial.Lex
                                                   GHC.Base.String)
                                              $dOrd
                                              $dOrd1
  = Examples.$s$fOrdVect_$s$fOrdVect_$cp1Ord
"SPEC/Examples ^ @ (LexPoly F2 String) @ Integer" [1] forall ($dIntegral :: GHC.Real.Integral
                                                                              GHC.Integer.Type.Integer)
                                                             ($dNum :: GHC.Num.Num
                                                                         (Math.CommutativeAlgebra.Polynomial.LexPoly
                                                                            Math.Core.Field.F2
                                                                            GHC.Base.String))
  GHC.Real.^ @ (Math.Algebras.VectorSpace.Vect
                  Math.Core.Field.F2
                  (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String))
             @ GHC.Integer.Type.Integer
             $dNum
             $dIntegral
  = Examples.$s^
"SPEC/Examples fromList @ (LexPoly F2 String)" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                           (Math.CommutativeAlgebra.Polynomial.LexPoly
                                                                              Math.Core.Field.F2
                                                                              GHC.Base.String))
  Data.Set.Internal.fromList @ (Math.Algebras.VectorSpace.Vect
                                  Math.Core.Field.F2
                                  (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String))
                             $dOrd
  = Examples.$sfromList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

