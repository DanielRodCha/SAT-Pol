
==================== FINAL INTERFACE ====================
2017-07-18 16:19:58.989766 UTC

interface SAT-Pol-0.1.0.0-CfnMeGgalar5P7rViiH2gc:Examples 8002
  interface hash: d88c4a53a66b9dacc9b59ebad92d21da
  ABI hash: f96905f064774e5fcb5305995f909891
  export-list hash: 57158dab1915eb85d42e3823d14af835
  orphan hash: 9ff3043f02b22e1f6da772252e2bcc2d
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  Examples.ej1
  Examples.ej2
  Examples.ej3
  Examples.example
  Examples.exampleSet
  Examples.x1
  Examples.x11
  Examples.x2
  Examples.x3
  Examples.x4
module dependencies:
package dependencies: HaskellForMaths-0.4.8@HaskellForMaths-0.4.8-8QcC8dcD7HF183G9RK8zU9
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      containers-0.5.10.2@containers-0.5.10.2-BsNvjXoQS1iGZ9xbXaQ0Mz
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: HaskellForMaths-0.4.8@HaskellForMaths-0.4.8-8QcC8dcD7HF183G9RK8zU9:Math.Algebras.Structures
         HaskellForMaths-0.4.8@HaskellForMaths-0.4.8-8QcC8dcD7HF183G9RK8zU9:Math.CommutativeAlgebra.Polynomial
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.10.2@containers-0.5.10.2-BsNvjXoQS1iGZ9xbXaQ0Mz:Data.Set.Internal
import  -/  HaskellForMaths-0.4.8@HaskellForMaths-0.4.8-8QcC8dcD7HF183G9RK8zU9:Math.Algebras.Structures cbf553a388e500de36f995a8d89172a4
import  -/  HaskellForMaths-0.4.8@HaskellForMaths-0.4.8-8QcC8dcD7HF183G9RK8zU9:Math.Algebras.TensorProduct c053039aae50bcc7df2c155eefb8e506
import  -/  HaskellForMaths-0.4.8@HaskellForMaths-0.4.8-8QcC8dcD7HF183G9RK8zU9:Math.Algebras.VectorSpace 6cba24ab7ee9b5f302ba65e0ee801d61
import  -/  HaskellForMaths-0.4.8@HaskellForMaths-0.4.8-8QcC8dcD7HF183G9RK8zU9:Math.CommutativeAlgebra.Polynomial c7dfc0a11b8634b439ae5817bdafa9d0
import  -/  HaskellForMaths-0.4.8@HaskellForMaths-0.4.8-8QcC8dcD7HF183G9RK8zU9:Math.Core.Field 75661b1cf3e7c0e1ab0f62f78c950ef8
import  -/  HaskellForMaths-0.4.8@HaskellForMaths-0.4.8-8QcC8dcD7HF183G9RK8zU9:Math.Core.Utils e8d4344d39cc226f5c5792a794aef4e4
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.10.2@containers-0.5.10.2-BsNvjXoQS1iGZ9xbXaQ0Mz:Data.Set 0a21f3925a0d3a5e69c1f4a8e792bc80
import  -/  containers-0.5.10.2@containers-0.5.10.2-BsNvjXoQS1iGZ9xbXaQ0Mz:Data.Set.Internal c7bd399b31e0ba0fc7a7a66d48f33dbc
6dbead41527c55384f076bf4dbe34584
  $s$fAlgebrakLex2 :: GHC.Classes.Ord [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fOrd[]_$s$fOrd[]1 -}
4a018a316d05765fcb29dc25096d3dff
  $s$fEqLex ::
    GHC.Classes.Eq
      (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
                  (Math.CommutativeAlgebra.Polynomial.$fEqLex_$c==
                     @ [GHC.Types.Char]
                     Examples.$s$fEqLex_$dEq)
                  (Math.CommutativeAlgebra.Polynomial.$fEqLex_$c/=
                     @ [GHC.Types.Char]
                     Examples.$s$fEqLex_$dEq) -}
b3d743344170f2550446db4bc395c6e6
  $s$fEqLex_$dEq :: GHC.Classes.Eq [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$fEq[]1 -}
e22d412be7090172275eaff8ba9fc168
  $s$fEqVect ::
    GHC.Classes.Eq
      (Math.Algebras.VectorSpace.Vect
         Math.Core.Field.F2
         (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Math.Algebras.VectorSpace.Vect
                       Math.Core.Field.F2
                       (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String))
                  (Math.Algebras.VectorSpace.$fEqVect_$c==
                     @ Math.Core.Field.F2
                     @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                     Examples.$s$fEqVect_$dEq
                     Examples.$s$fEqVect_$s$fOrdLex_$cp1Ord)
                  (Math.Algebras.VectorSpace.$fEqVect_$c/=
                     @ Math.Core.Field.F2
                     @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                     Examples.$s$fEqVect_$dEq
                     Examples.$s$fEqVect_$s$fOrdLex_$cp1Ord) -}
e6d2dffbaf840bd71dbbb8e99590c916
  $s$fEqVect_$dEq :: GHC.Classes.Eq Math.Core.Field.F2
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Math.Core.Field.$fEqF2 -}
65bd7889f389e2066ab782baae1d53f6
  $s$fEqVect_$s$fOrdLex_$cp1Ord ::
    GHC.Classes.Eq
      (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Examples.$s$fEqLex -}
c8d97259edd4d6b5b8c0467ceb747dd3
  $s$fNumVect11 ::
    GHC.Classes.Ord
      (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Examples.$s$fNumVect_$s$fOrdLex -}
7c24668131f54f88ec981063a4885f21
  $s$fNumVect12 ::
    Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(U,U)><S(LS),1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
                   (y :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]) ->
                 case x `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww { Math.CommutativeAlgebra.Polynomial.M ww1 ww2 ->
                 case y `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww3 { Math.CommutativeAlgebra.Polynomial.M ww4 ww5 ->
                 case Math.CommutativeAlgebra.Polynomial.$w$ccompare
                        @ [GHC.Types.Char]
                        GHC.Classes.$fOrd[]_$s$fOrd[]1
                        ww2
                        ww5 of wild {
                   DEFAULT
                   -> ww
                        `cast`
                      (Sym (Math.CommutativeAlgebra.Polynomial.N:Lex[0]) <[GHC.Types.Char]>_N)
                   GHC.Types.GT
                   -> ww3
                        `cast`
                      (Sym (Math.CommutativeAlgebra.Polynomial.N:Lex[0]) <[GHC.Types.Char]>_N) } } }) -}
b8ecd31764f879fa33510c5ebf57bb5a
  $s$fNumVect13 ::
    Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(U,U)><S(LS),1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
                   (y :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]) ->
                 case x `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww { Math.CommutativeAlgebra.Polynomial.M ww1 ww2 ->
                 case y `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww3 { Math.CommutativeAlgebra.Polynomial.M ww4 ww5 ->
                 case Math.CommutativeAlgebra.Polynomial.$w$ccompare
                        @ [GHC.Types.Char]
                        GHC.Classes.$fOrd[]_$s$fOrd[]1
                        ww2
                        ww5 of wild {
                   DEFAULT
                   -> ww3
                        `cast`
                      (Sym (Math.CommutativeAlgebra.Polynomial.N:Lex[0]) <[GHC.Types.Char]>_N)
                   GHC.Types.GT
                   -> ww
                        `cast`
                      (Sym (Math.CommutativeAlgebra.Polynomial.N:Lex[0]) <[GHC.Types.Char]>_N) } } }) -}
944a4213390a923eb67a021bd79106b1
  $s$fNumVect14 ::
    Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(A,1*U)><S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
                   (y :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]) ->
                 case x `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww { Math.CommutativeAlgebra.Polynomial.M ww1 ww2 ->
                 case y `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww3 { Math.CommutativeAlgebra.Polynomial.M ww4 ww5 ->
                 case Math.CommutativeAlgebra.Polynomial.$w$ccompare
                        @ [GHC.Types.Char]
                        GHC.Classes.$fOrd[]_$s$fOrd[]1
                        ww2
                        ww5 of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }) -}
d575db8f1e758317597261d719e0d303
  $s$fNumVect15 ::
    Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(A,1*U)><S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
                   (y :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]) ->
                 case x `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww { Math.CommutativeAlgebra.Polynomial.M ww1 ww2 ->
                 case y `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww3 { Math.CommutativeAlgebra.Polynomial.M ww4 ww5 ->
                 case Math.CommutativeAlgebra.Polynomial.$w$ccompare
                        @ [GHC.Types.Char]
                        GHC.Classes.$fOrd[]_$s$fOrd[]1
                        ww2
                        ww5 of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True } } }) -}
0db999a446897fe37c4095d56e179076
  $s$fNumVect16 ::
    Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(A,1*U)><S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
                   (y :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]) ->
                 case x `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww { Math.CommutativeAlgebra.Polynomial.M ww1 ww2 ->
                 case y `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww3 { Math.CommutativeAlgebra.Polynomial.M ww4 ww5 ->
                 case Math.CommutativeAlgebra.Polynomial.$w$ccompare
                        @ [GHC.Types.Char]
                        GHC.Classes.$fOrd[]_$s$fOrd[]1
                        ww2
                        ww5 of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False } } }) -}
11b1475d21ff5a38abfbcf83614eea97
  $s$fNumVect17 ::
    Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(A,1*U)><S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
                   (y :: Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]) ->
                 case x `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww { Math.CommutativeAlgebra.Polynomial.M ww1 ww2 ->
                 case y `cast`
                      (Math.CommutativeAlgebra.Polynomial.N:Lex[0] <[GHC.Types.Char]>_N) of ww3 { Math.CommutativeAlgebra.Polynomial.M ww4 ww5 ->
                 case Math.CommutativeAlgebra.Polynomial.$w$ccompare
                        @ [GHC.Types.Char]
                        GHC.Classes.$fOrd[]_$s$fOrd[]1
                        ww2
                        ww5 of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True } } }) -}
b30d44024f6dfe33d10c212c24115f28
  $s$fNumVect2 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
      Math.Core.Field.F2)]
  {- Unfolding: (GHC.Types.:
                   @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                      Math.Core.Field.F2)
                   Examples.$s$fNumVect3
                   (GHC.Types.[]
                      @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                         Math.Core.Field.F2))) -}
d2512bdba0515135200e0bfada1791fd
  $s$fNumVect3 ::
    (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
     Math.Core.Field.F2)
  {- Unfolding: (((Math.CommutativeAlgebra.Polynomial.$fAlgebrakGlex1
                     @ [GHC.Types.Char])
                    `cast`
                  (Sym (Math.CommutativeAlgebra.Polynomial.N:Lex[0]) <[GHC.Types.Char]>_N),
                  Examples.$s$fNumVect4)) -}
ef8f6515105089574409e872d3959702
  $s$fNumVect4 :: Math.Core.Field.F2
  {- Unfolding: (case GHC.Classes.modInt# 1# 2# of ww2 { DEFAULT ->
                 (GHC.Types.I# ww2) `cast` (Sym (Math.Core.Field.N:F2[0])) }) -}
21f5f197786f681d74b9b4e09b5c7598
  $s$fNumVect7 ::
    Math.Algebras.VectorSpace.Vect
      Math.Core.Field.F2
      (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
    -> Math.Algebras.VectorSpace.Vect
         Math.Core.Field.F2
         (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
    -> Math.Algebras.VectorSpace.Vect
         Math.Core.Field.F2
         (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Math.Algebras.VectorSpace.Vect
                           Math.Core.Field.F2
                           (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String))
                   (y :: Math.Algebras.VectorSpace.Vect
                           Math.Core.Field.F2
                           (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)) ->
                 Math.CommutativeAlgebra.Polynomial.$w$cmult2
                   @ Math.Core.Field.F2
                   @ [GHC.Types.Char]
                   Math.Core.Field.$fEqF2
                   Math.Core.Field.$fNumF2
                   GHC.Classes.$fOrd[]_$s$fOrd[]1
                   (Math.Algebras.TensorProduct.reify1
                      @ Math.Core.Field.F2
                      @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                      @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                      Math.Core.Field.$fNumF2
                      x
                      y)
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
                               Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)>_R))) -}
27f3d928c1367442ff59122dab4f95ef
  $s$fNumVect_$s$fOrdLex ::
    GHC.Classes.Ord
      (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
                  Examples.$s$fEqVect_$s$fOrdLex_$cp1Ord
                  (Math.CommutativeAlgebra.Polynomial.$fOrdLex_$ccompare
                     @ [GHC.Types.Char]
                     Examples.$s$fAlgebrakLex2)
                  Examples.$s$fNumVect17
                  Examples.$s$fNumVect16
                  Examples.$s$fNumVect15
                  Examples.$s$fNumVect14
                  Examples.$s$fNumVect13
                  Examples.$s$fNumVect12 -}
953822b62cb28930e39fe0ba1ca2363b
  $s$fOrdVect ::
    GHC.Classes.Ord
      (Math.Algebras.VectorSpace.Vect
         Math.Core.Field.F2
         (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Math.Algebras.VectorSpace.Vect
                       Math.Core.Field.F2
                       (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String))
                  Examples.$s$fOrdVect_$s$fOrdVect_$cp1Ord
                  (Math.Algebras.VectorSpace.$fOrdVect_$ccompare
                     @ Math.Core.Field.F2
                     @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                     Math.Core.Field.$fOrdF2
                     Examples.$s$fNumVect11)
                  (Math.Algebras.VectorSpace.$fOrdVect_$c<
                     @ Math.Core.Field.F2
                     @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                     Math.Core.Field.$fOrdF2
                     Examples.$s$fNumVect11)
                  (Math.Algebras.VectorSpace.$fOrdVect_$c<=
                     @ Math.Core.Field.F2
                     @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                     Math.Core.Field.$fOrdF2
                     Examples.$s$fNumVect11)
                  (Math.Algebras.VectorSpace.$fOrdVect_$c>
                     @ Math.Core.Field.F2
                     @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                     Math.Core.Field.$fOrdF2
                     Examples.$s$fNumVect11)
                  (Math.Algebras.VectorSpace.$fOrdVect_$c>=
                     @ Math.Core.Field.F2
                     @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                     Math.Core.Field.$fOrdF2
                     Examples.$s$fNumVect11)
                  (Math.Algebras.VectorSpace.$fOrdVect_$cmax
                     @ Math.Core.Field.F2
                     @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                     Math.Core.Field.$fOrdF2
                     Examples.$s$fNumVect11)
                  (Math.Algebras.VectorSpace.$fOrdVect_$cmin
                     @ Math.Core.Field.F2
                     @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                     Math.Core.Field.$fOrdF2
                     Examples.$s$fNumVect11) -}
4dfec5831919fb54055b185e9f3520b5
  $s$fOrdVect_$s$fOrdVect_$cp1Ord ::
    GHC.Classes.Eq
      (Math.Algebras.VectorSpace.Vect
         Math.Core.Field.F2
         (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Examples.$s$fEqVect -}
9036d2997ec53245c448b9d8849ce0c5
  $s^ ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> Math.CommutativeAlgebra.Polynomial.LexPoly
         Math.Core.Field.F2 GHC.Base.String
  {- Arity: 2, Strictness: <L,U><S,U>, Inline: [1],
     Unfolding: (\ (eta :: Math.CommutativeAlgebra.Polynomial.LexPoly
                             Math.Core.Field.F2 GHC.Base.String)
                   (eta1 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.ltInteger#
                        eta1
                        Examples.$s^3 of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False
                   -> case GHC.Integer.Type.eqInteger#
                             eta1
                             Examples.$s^3 of wild2 { DEFAULT ->
                      case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                        GHC.Types.False -> Examples.$s^_f eta eta1
                        GHC.Types.True -> Examples.$s^2 } }
                   GHC.Types.True -> Examples.$s^1 } }) -}
4ce7ea6debfc92a45d06551ba6ce4882
  $s^1 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Strictness: x -}
112b2231ad6e8cd2277aa08d0c58c0a1
  $s^2 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Unfolding: (case GHC.Classes.modInt# 0# 2# of ww2 { DEFAULT ->
                 case GHC.Classes.modInt# 1# 2# of ww1 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww1 ww2) of wild {
                   GHC.Types.False
                   -> letrec {
                        go :: [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                Math.Core.Field.F2)]
                              -> [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                   Math.Core.Field.F2)]
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds2 :: [(Math.CommutativeAlgebra.Polynomial.Lex
                                        [GHC.Types.Char],
                                      Math.Core.Field.F2)]) ->
                          case ds2 of wild1 {
                            []
                            -> GHC.Types.[]
                                 @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                    Math.Core.Field.F2)
                            : y ys
                            -> case y of wild2 { (,) ei xi ->
                               GHC.Types.:
                                 @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                    Math.Core.Field.F2)
                                 (ei,
                                  case xi
                                         `cast`
                                       (Math.Core.Field.N:F2[0]) of wild4 { GHC.Types.I# y1 ->
                                  (GHC.Types.I# (GHC.Prim.*# ww1 y1))
                                    `cast`
                                  (Sym (Math.Core.Field.N:F2[0])) })
                                 (go ys) } }
                      } in
                      (go Examples.$s$fNumVect2)
                        `cast`
                      (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                                <Math.Core.Field.F2>_R
                                <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))
                   GHC.Types.True
                   -> (GHC.Types.[]
                         @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                            Math.Core.Field.F2))
                        `cast`
                      (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                                <Math.Core.Field.F2>_R
                                <Math.CommutativeAlgebra.Polynomial.Lex
                                   [GHC.Types.Char]>_R)) } } }) -}
27dc004e9d98d4d1595f23e3c43e4e94
  $s^3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
0b5b0b7f9eb7197c375e23b1b5aba18e
  $s^_f ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> Math.CommutativeAlgebra.Polynomial.LexPoly
         Math.Core.Field.F2 GHC.Base.String
  {- Arity: 2, Strictness: <L,U><S,U> -}
deef99668906672f4c900c0124c4bed2
  $seven1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
971625f6fd8cac6ee409208f877ca428
  $sfromList ::
    [Math.CommutativeAlgebra.Polynomial.LexPoly
       Math.Core.Field.F2 GHC.Base.String]
    -> Data.Set.Internal.Set
         (Math.CommutativeAlgebra.Polynomial.LexPoly
            Math.Core.Field.F2 GHC.Base.String)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Math.CommutativeAlgebra.Polynomial.LexPoly
                             Math.Core.Field.F2 GHC.Base.String]) ->
                 case ds of wild {
                   []
                   -> Data.Set.Internal.Tip
                        @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                             Math.Core.Field.F2 GHC.Base.String)
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x `cast`
                                (Math.Algebras.VectorSpace.N:Vect[0]
                                     <Math.Core.Field.F2>_R
                                     <Math.CommutativeAlgebra.Polynomial.Lex
                                        GHC.Base.String>_R) of nt { DEFAULT ->
                           Data.Set.Internal.Bin
                             @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                                  Math.Core.Field.F2 GHC.Base.String)
                             1#
                             nt
                               `cast`
                             (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                                       <Math.Core.Field.F2>_R
                                       <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R))
                             (Data.Set.Internal.Tip
                                @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                                     Math.Core.Field.F2 GHC.Base.String))
                             (Data.Set.Internal.Tip
                                @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                                     Math.Core.Field.F2 GHC.Base.String)) }
                        : ipv ipv1
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
                                     Math.Core.Field.F2)
                                  Examples.$sfromList_$dOrd2
                                  x `cast`
                                  (Math.Algebras.VectorSpace.N:Vect[0]
                                       <Math.Core.Field.F2>_R
                                       <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R)
                                  ipv
                                    `cast`
                                  (Math.Algebras.VectorSpace.N:Vect[0]
                                       <Math.Core.Field.F2>_R
                                       <Math.CommutativeAlgebra.Polynomial.Lex
                                          GHC.Base.String>_R) of wild2 {
                             DEFAULT
                             -> case x `cast`
                                     (Math.Algebras.VectorSpace.N:Vect[0]
                                          <Math.Core.Field.F2>_R
                                          <Math.CommutativeAlgebra.Polynomial.Lex
                                             GHC.Base.String>_R) of nt { DEFAULT ->
                                Examples.$sfromList_go5
                                  (Data.Set.Internal.Bin
                                     @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                                          Math.Core.Field.F2 GHC.Base.String)
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                                               <Math.Core.Field.F2>_R
                                               <Math.CommutativeAlgebra.Polynomial.Lex
                                                  GHC.Base.String>_R))
                                     (Data.Set.Internal.Tip
                                        @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                                             Math.Core.Field.F2 GHC.Base.String))
                                     (Data.Set.Internal.Tip
                                        @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                                             Math.Core.Field.F2 GHC.Base.String)))
                                  wild1 }
                             GHC.Types.LT
                             -> case x `cast`
                                     (Math.Algebras.VectorSpace.N:Vect[0]
                                          <Math.Core.Field.F2>_R
                                          <Math.CommutativeAlgebra.Polynomial.Lex
                                             GHC.Base.String>_R) of nt { DEFAULT ->
                                Examples.$wgo5
                                  1#
                                  (Data.Set.Internal.Bin
                                     @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                                          Math.Core.Field.F2 GHC.Base.String)
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                                               <Math.Core.Field.F2>_R
                                               <Math.CommutativeAlgebra.Polynomial.Lex
                                                  GHC.Base.String>_R))
                                     (Data.Set.Internal.Tip
                                        @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                                             Math.Core.Field.F2 GHC.Base.String))
                                     (Data.Set.Internal.Tip
                                        @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                                             Math.Core.Field.F2 GHC.Base.String)))
                                  wild1 } } } }) -}
8e334a1e4200e05d095f3d6097c17784
  $sfromList_$dOrd2 ::
    GHC.Classes.Ord
      (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
       Math.Core.Field.F2)
  {- Unfolding: (GHC.Classes.$fOrd(,)
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   @ Math.Core.Field.F2
                   Examples.$s$fNumVect_$s$fOrdLex
                   Math.Core.Field.$fOrdF2) -}
4a8dd256f90e548ce66ec47d29e62ae3
  $sfromList_go5 ::
    Data.Set.Internal.Set
      (Math.CommutativeAlgebra.Polynomial.LexPoly
         Math.Core.Field.F2 GHC.Base.String)
    -> [Math.CommutativeAlgebra.Polynomial.LexPoly
          Math.Core.Field.F2 GHC.Base.String]
    -> Data.Set.Internal.Set
         (Math.CommutativeAlgebra.Polynomial.LexPoly
            Math.Core.Field.F2 GHC.Base.String)
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
47ed31398fd025a5211f2366f0961477
  $sinsert_go5 ::
    GHC.Classes.Ord a1 =>
    a1 -> a1 -> Data.Set.Internal.Set a1 -> Data.Set.Internal.Set a1
  {- Arity: 4,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U><S,1*U><S,1*U> -}
d6b9b78bbd99610c68f16ca3fd51898c
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Examples.$trModule2
                   Examples.$trModule1) -}
98dab85fff217bcd8b5dc86dfbfcac89
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Examples"#) -}
737db1cd10536b3af5abb13a8919a6b6
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "SAT-Pol-0.1.0.0-CfnMeGgalar5P7rViiH2gc"#) -}
1777667b8cd76e8bb9f248ec5b8bc5c2
  $wgo5 ::
    GHC.Prim.Int#
    -> Data.Set.Internal.Set
         (Math.CommutativeAlgebra.Polynomial.LexPoly
            Math.Core.Field.F2 GHC.Base.String)
    -> [Math.CommutativeAlgebra.Polynomial.LexPoly
          Math.Core.Field.F2 GHC.Base.String]
    -> Data.Set.Internal.Set
         (Math.CommutativeAlgebra.Polynomial.LexPoly
            Math.Core.Field.F2 GHC.Base.String)
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
655da1db1c962ae1571845066faff10c
  ej1 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Unfolding: InlineRule (0, True, True)
                Examples.ej4
                  `cast`
                (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                          <Math.Core.Field.F2>_R
                          <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R)) -}
cbc7c79cb9c05167676258b5685059cf
  ej10 :: [([GHC.Types.Char], GHC.Types.Int)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Int)
                   Examples.ej11
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.Types.Int))) -}
245741d56ceaf7ff0ea57f7f96fdcce5
  ej11 :: ([GHC.Types.Char], GHC.Types.Int)
  {- Strictness: m,
     Unfolding: ((Examples.ej12,
                  Math.CommutativeAlgebra.Polynomial.$fMonomialConstructorGlex1)) -}
87158cdd7b592ff000b2e2667b487e22
  ej12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "x2"#) -}
cd5ea8bf3e5ab3602c37d22a5d7ac6b0
  ej13 ::
    Math.Algebras.VectorSpace.Vect
      Math.Core.Field.F2
      (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Unfolding: (Examples.ej27
                   Examples.ej14
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
                               Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)>_R))) -}
54ca98c2865dd8051290f86ee9efb8e1
  ej14 ::
    [((Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
       Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String),
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.TensorProduct.reify1
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fNumF2
                   Examples.ej21
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))
                   Examples.ej15
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))) -}
67d5f035e100eddc85e4cc5332982c04
  ej15 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
      Math.Core.Field.F2)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                      Math.Core.Field.F2)
                   Examples.ej16
                   (GHC.Types.[]
                      @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                         Math.Core.Field.F2))) -}
a446d658926c85bb85055ed3eb33469b
  ej16 ::
    (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
     Math.Core.Field.F2)
  {- Strictness: m,
     Unfolding: ((Examples.ej17
                    `cast`
                  (Sym (Math.CommutativeAlgebra.Polynomial.N:Lex[0]) <[GHC.Types.Char]>_N),
                  Examples.$s$fNumVect4)) -}
683a7a119cae0352f2709fb1f0187a16
  ej17 :: Math.CommutativeAlgebra.Polynomial.MonImpl [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: (Math.CommutativeAlgebra.Polynomial.M
                   @ [GHC.Types.Char]
                   Math.CommutativeAlgebra.Polynomial.$fMonomialConstructorGlex1
                   Examples.ej18) -}
ad07d3e060e2ff9250b927cec411ec1b
  ej18 :: [([GHC.Types.Char], GHC.Types.Int)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Int)
                   Examples.ej19
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.Types.Int))) -}
8e616f4e80c3a6eef0245e7b6c523bfe
  ej19 :: ([GHC.Types.Char], GHC.Types.Int)
  {- Strictness: m,
     Unfolding: ((Examples.ej20,
                  Math.CommutativeAlgebra.Polynomial.$fMonomialConstructorGlex1)) -}
165389699e6bfcba6ed086acefcb82da
  ej2 ::
    Math.Algebras.VectorSpace.Vect
      Math.Core.Field.F2
      (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
  {- Unfolding: InlineRule (0, True, True)
                Examples.ej49
                  `cast`
                (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                          <Math.Core.Field.F2>_R
                          <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R)) -}
4635b288f0135bd477a0119fe40cde32
  ej20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "x1"#) -}
db70e12b361cf789c076ecd4c8da4430
  ej21 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
      Math.Core.Field.F2)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                      Math.Core.Field.F2)
                   Examples.ej22
                   (GHC.Types.[]
                      @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                         Math.Core.Field.F2))) -}
465b443b0b696333e1e1705a1a65094e
  ej22 ::
    (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
     Math.Core.Field.F2)
  {- Strictness: m,
     Unfolding: ((Examples.ej23
                    `cast`
                  (Sym (Math.CommutativeAlgebra.Polynomial.N:Lex[0]) <[GHC.Types.Char]>_N),
                  Examples.$s$fNumVect4)) -}
6d24b03577cc8bc5d08286c27ec0c344
  ej23 :: Math.CommutativeAlgebra.Polynomial.MonImpl [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: (Math.CommutativeAlgebra.Polynomial.M
                   @ [GHC.Types.Char]
                   Math.CommutativeAlgebra.Polynomial.$fMonomialConstructorGlex1
                   Examples.ej24) -}
e3359a85d05e8247ed0e809ea0eba43c
  ej24 :: [([GHC.Types.Char], GHC.Types.Int)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Int)
                   Examples.ej25
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.Types.Int))) -}
98efa03fc7470aac543ca5cacf925b80
  ej25 :: ([GHC.Types.Char], GHC.Types.Int)
  {- Strictness: m,
     Unfolding: ((Examples.ej26,
                  Math.CommutativeAlgebra.Polynomial.$fMonomialConstructorGlex1)) -}
cd27c451da8369dfcbae96a4274948ba
  ej26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "x11"#) -}
d435477558332c9168bfc38e36696125
  ej27 ::
    Math.Algebras.VectorSpace.Vect
      Math.Core.Field.F2
      (Math.Algebras.TensorProduct.Tensor
         (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
         (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]))
    -> Math.Algebras.VectorSpace.Vect
         Math.Core.Field.F2
         (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Unfolding: (Math.CommutativeAlgebra.Polynomial.$w$cmult2
                   @ Math.Core.Field.F2
                   @ [GHC.Types.Char]
                   Math.Core.Field.$fEqF2
                   Math.Core.Field.$fNumF2
                   GHC.Classes.$fOrd[]_$s$fOrd[]1) -}
b49e371c225c3052b386bdf35c1ea356
  ej28 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.VectorSpace.addmerge
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fEqF2
                   Math.Core.Field.$fNumF2
                   Examples.$s$fNumVect_$s$fOrdLex
                   Examples.ej37
                   Examples.ej29
                     `cast`
                   (Math.Algebras.VectorSpace.N:Vect[0]
                        <Math.Core.Field.F2>_R
                        <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R)) -}
7c2e2c47d04b22e7b5e64a2dbcf88936
  ej29 ::
    Math.Algebras.VectorSpace.Vect
      Math.Core.Field.F2
      (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Unfolding: (Examples.ej27
                   Examples.ej30
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
                               Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)>_R))) -}
af2836b925fa79f295061bead8649600
  ej3 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Unfolding: (Examples.$s^
                   Examples.ej4
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R))
                   Examples.ej65) -}
9c50927cf1c5029de04b2e2d574c7633
  ej30 ::
    [((Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
       Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String),
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.TensorProduct.reify1
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fNumF2
                   Examples.ej31
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))
                   Examples.ej21
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))) -}
30689909f6a6cb480ee4a6dce6dc533d
  ej31 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
      Math.Core.Field.F2)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                      Math.Core.Field.F2)
                   Examples.ej32
                   (GHC.Types.[]
                      @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                         Math.Core.Field.F2))) -}
d86f023b9a9ae2d340b4c1480ba38d1c
  ej32 ::
    (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
     Math.Core.Field.F2)
  {- Strictness: m,
     Unfolding: ((Examples.ej33
                    `cast`
                  (Sym (Math.CommutativeAlgebra.Polynomial.N:Lex[0]) <[GHC.Types.Char]>_N),
                  Examples.$s$fNumVect4)) -}
ecf95ba0764fb7cc41a65e940f0e1cbf
  ej33 :: Math.CommutativeAlgebra.Polynomial.MonImpl [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: (Math.CommutativeAlgebra.Polynomial.M
                   @ [GHC.Types.Char]
                   Math.CommutativeAlgebra.Polynomial.$fMonomialConstructorGlex1
                   Examples.ej34) -}
f983d9087f9f89d17453eb409a9c37ec
  ej34 :: [([GHC.Types.Char], GHC.Types.Int)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Int)
                   Examples.ej35
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.Types.Int))) -}
90198fadb3be4a71cb436673f586e1ce
  ej35 :: ([GHC.Types.Char], GHC.Types.Int)
  {- Strictness: m,
     Unfolding: ((Examples.ej36,
                  Math.CommutativeAlgebra.Polynomial.$fMonomialConstructorGlex1)) -}
89d28bbfe8afc51724d6f32d5c23c449
  ej36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "x4"#) -}
5c8e43cf3276b6b54b136c8bd05ac2c8
  ej37 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.VectorSpace.addmerge
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fEqF2
                   Math.Core.Field.$fNumF2
                   Examples.$s$fNumVect_$s$fOrdLex
                   Examples.ej38
                   Examples.ej7) -}
6f6c789eba098241619b777539eac8d5
  ej38 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.VectorSpace.addmerge
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fEqF2
                   Math.Core.Field.$fNumF2
                   Examples.$s$fNumVect_$s$fOrdLex
                   Examples.ej47
                     `cast`
                   (Math.Algebras.VectorSpace.N:Vect[0]
                        <Math.Core.Field.F2>_R
                        <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R)
                   Examples.ej39
                     `cast`
                   (Math.Algebras.VectorSpace.N:Vect[0]
                        <Math.Core.Field.F2>_R
                        <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R)) -}
bdeed351d26e4068ca37f5ee7ccb3db9
  ej39 ::
    Math.Algebras.VectorSpace.Vect
      Math.Core.Field.F2
      (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Unfolding: (Examples.ej27
                   Examples.ej40
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
                               Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)>_R))) -}
eee50a07bec5074c1b13b07cb7f58fcb
  ej4 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.VectorSpace.addmerge
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fEqF2
                   Math.Core.Field.$fNumF2
                   Examples.$s$fNumVect_$s$fOrdLex
                   Examples.ej28
                   Examples.ej5
                     `cast`
                   (Math.Algebras.VectorSpace.N:Vect[0]
                        <Math.Core.Field.F2>_R
                        <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R)) -}
6d308a096381fd65c40778e8a251842d
  ej40 ::
    [((Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
       Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String),
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.TensorProduct.reify1
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fNumF2
                   Examples.ej7
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))
                   Examples.ej41
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))) -}
3d6b601aec84a3305d29b20f4318fa40
  ej41 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
      Math.Core.Field.F2)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                      Math.Core.Field.F2)
                   Examples.ej42
                   (GHC.Types.[]
                      @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                         Math.Core.Field.F2))) -}
3670eab67f954b63ff20eb7d441eaeb1
  ej42 ::
    (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
     Math.Core.Field.F2)
  {- Strictness: m,
     Unfolding: ((Examples.ej43
                    `cast`
                  (Sym (Math.CommutativeAlgebra.Polynomial.N:Lex[0]) <[GHC.Types.Char]>_N),
                  Examples.$s$fNumVect4)) -}
1eea4e0d7664fbe7f2c89653c7ef457b
  ej43 :: Math.CommutativeAlgebra.Polynomial.MonImpl [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: (Math.CommutativeAlgebra.Polynomial.M
                   @ [GHC.Types.Char]
                   Math.CommutativeAlgebra.Polynomial.$fMonomialConstructorGlex1
                   Examples.ej44) -}
1370edfb47cb691b7705306aac35b4b2
  ej44 :: [([GHC.Types.Char], GHC.Types.Int)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Int)
                   Examples.ej45
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.Types.Int))) -}
0ddaa60886ec0fc8e7982566be9b0335
  ej45 :: ([GHC.Types.Char], GHC.Types.Int)
  {- Strictness: m,
     Unfolding: ((Examples.ej46,
                  Math.CommutativeAlgebra.Polynomial.$fMonomialConstructorGlex1)) -}
4baf833e2e0a81afd6d438b143835004
  ej46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "x3"#) -}
aa210561223d95c387bb3342f6928fca
  ej47 ::
    Math.Algebras.VectorSpace.Vect
      Math.Core.Field.F2
      (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Unfolding: (Examples.ej27
                   Examples.ej48
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
                               Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)>_R))) -}
7fd7a9de69a9083e30c794b925bbdfaf
  ej48 ::
    [((Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
       Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String),
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.TensorProduct.reify1
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fNumF2
                   Examples.ej15
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))
                   Examples.ej7
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))) -}
312d117983f0c8567200d6a6505ab1b7
  ej49 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.VectorSpace.addmerge
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fEqF2
                   Math.Core.Field.$fNumF2
                   Examples.$s$fNumVect_$s$fOrdLex
                   Examples.ej56
                   Examples.ej50
                     `cast`
                   (Math.Algebras.VectorSpace.N:Vect[0]
                        <Math.Core.Field.F2>_R
                        <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R)) -}
7108c8c6ad0008dbb32414180afc3ebd
  ej5 ::
    Math.Algebras.VectorSpace.Vect
      Math.Core.Field.F2
      (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Unfolding: (Examples.ej27
                   Examples.ej6
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
                               Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)>_R))) -}
eef6ddb5d579e2a3e68bab965ece7e0b
  ej50 ::
    Math.Algebras.VectorSpace.Vect
      Math.Core.Field.F2
      (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Unfolding: (Examples.ej27
                   Examples.ej51
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
                               Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)>_R))) -}
b2e0a0f884fcd9d48f0b70720b18cd5b
  ej51 ::
    [((Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
       Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String),
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.TensorProduct.reify1
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fNumF2
                   Examples.ej54
                   Examples.ej52) -}
1963218de2b31495aa285820c33d641c
  ej52 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Unfolding: (Examples.$s^
                   Examples.ej7
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))
                   Examples.ej53) -}
5bc2d3ed32ef90bf11c602788a86a223
  ej53 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (12) -}
7de3cac4e34bb27b48d128b0ff6f16c2
  ej54 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Unfolding: (Examples.$s^
                   Examples.ej15
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))
                   Examples.ej55) -}
dd7bc4fba62d3641cb4aa861039404af
  ej55 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (34) -}
5483d846a4fbf344f2d7b268592a9d31
  ej56 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.VectorSpace.addmerge
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fEqF2
                   Math.Core.Field.$fNumF2
                   Examples.$s$fNumVect_$s$fOrdLex
                   Examples.ej57
                     `cast`
                   (Math.Algebras.VectorSpace.N:Vect[0]
                        <Math.Core.Field.F2>_R
                        <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R)
                   Examples.ej15) -}
47813a9cad364233dc83da4edafe34d8
  ej57 ::
    Math.Algebras.VectorSpace.Vect
      Math.Core.Field.F2
      (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Unfolding: (Examples.ej27
                   Examples.ej58
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
                               Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)>_R))) -}
ff5c788d84a48bbaa01c4bffd8c0cc40
  ej58 ::
    [((Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
       Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String),
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.TensorProduct.reify1
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fNumF2
                   Examples.ej31
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))
                   Examples.ej59) -}
11f13bad43a2aad9699deaac34a651dc
  ej59 ::
    Math.Algebras.VectorSpace.Vect
      Math.Core.Field.F2
      (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Unfolding: (Examples.ej27
                   Examples.ej60
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
                               Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)>_R))) -}
349ba985ea1e818afdc2ab78cb812b45
  ej6 ::
    [((Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
       Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String),
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.TensorProduct.reify1
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fNumF2
                   Examples.ej13
                   Examples.ej7
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))) -}
2e03827dce4eacd3445eadd891d5234e
  ej60 ::
    [((Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
       Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String),
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.TensorProduct.reify1
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fNumF2
                   Examples.ej61
                   Examples.ej7
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))) -}
dda75cc13407d6eb2e83f38fe55aa486
  ej61 ::
    Math.Algebras.VectorSpace.Vect
      Math.Core.Field.F2
      (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Unfolding: (Examples.ej27
                   Examples.ej62
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
                               Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)>_R))) -}
71f8f077858be6cb8295b3acd95492b4
  ej62 ::
    [((Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
       Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String),
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.TensorProduct.reify1
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fNumF2
                   Examples.ej63
                   Examples.ej7
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))) -}
8c95a0d73a5cd6ed265880208bde0f12
  ej63 ::
    Math.Algebras.VectorSpace.Vect
      Math.Core.Field.F2
      (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char])
  {- Unfolding: (Examples.ej27
                   Examples.ej64
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
                               Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)>_R))) -}
24dc5d62b5226522d5c7cd5508533f89
  ej64 ::
    [((Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
       Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String),
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.TensorProduct.reify1
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fNumF2
                   Examples.ej7
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))
                   Examples.ej7
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R))) -}
23bc2479baa65414786019e3a33aff1c
  ej65 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1001) -}
65e50950fee58796ac516dc676478c14
  ej7 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
      Math.Core.Field.F2)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                      Math.Core.Field.F2)
                   Examples.ej8
                   (GHC.Types.[]
                      @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                         Math.Core.Field.F2))) -}
3b4281b7d8de329f4b792563e9e4d447
  ej8 ::
    (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
     Math.Core.Field.F2)
  {- Strictness: m,
     Unfolding: ((Examples.ej9
                    `cast`
                  (Sym (Math.CommutativeAlgebra.Polynomial.N:Lex[0]) <[GHC.Types.Char]>_N),
                  Examples.$s$fNumVect4)) -}
4ffbccabb1fab56e53321e1156319faf
  ej9 :: Math.CommutativeAlgebra.Polynomial.MonImpl [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: (Math.CommutativeAlgebra.Polynomial.M
                   @ [GHC.Types.Char]
                   Math.CommutativeAlgebra.Polynomial.$fMonomialConstructorGlex1
                   Examples.ej10) -}
10ba26768ea62cfd9170a54f715ba74e
  example ::
    [Math.CommutativeAlgebra.Polynomial.LexPoly
       Math.Core.Field.F2 GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                        Math.Core.Field.F2 GHC.Base.String)
                   Examples.$s^2
                   Examples.example1) -}
7b97c8ee884f477ca7dd9ff2e988bb43
  example1 ::
    [Math.CommutativeAlgebra.Polynomial.LexPoly
       Math.Core.Field.F2 GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                        Math.Core.Field.F2 GHC.Base.String)
                   Examples.example10
                     `cast`
                   (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                             <Math.Core.Field.F2>_R
                             <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R))
                   Examples.example2) -}
e67855f2a4812acd2b0eb87c5a6e0b85
  example10 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.VectorSpace.addmerge
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fEqF2
                   Math.Core.Field.$fNumF2
                   Examples.$s$fNumVect_$s$fOrdLex
                   Examples.example9
                   Examples.ej7) -}
50cf1fa6d814ccfc852ffde8e885162e
  example2 ::
    [Math.CommutativeAlgebra.Polynomial.LexPoly
       Math.Core.Field.F2 GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                        Math.Core.Field.F2 GHC.Base.String)
                   Examples.example8
                   Examples.example3) -}
8ed33b7d2c147ba24cdaba8bacd0dc61
  example3 ::
    [Math.CommutativeAlgebra.Polynomial.LexPoly
       Math.Core.Field.F2 GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                        Math.Core.Field.F2 GHC.Base.String)
                   Examples.example7
                   Examples.example4) -}
dec7824b9087da52b42b7f9eed14fc2e
  example4 ::
    [Math.CommutativeAlgebra.Polynomial.LexPoly
       Math.Core.Field.F2 GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                        Math.Core.Field.F2 GHC.Base.String)
                   Examples.example5
                   (GHC.Types.[]
                      @ (Math.CommutativeAlgebra.Polynomial.LexPoly
                           Math.Core.Field.F2 GHC.Base.String))) -}
925ecf86925d6b36798fdbd4f5d84a67
  example5 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Unfolding: (case GHC.Classes.modInt# 0# 2# of ww2 { DEFAULT ->
                 case GHC.Classes.modInt# 1# 2# of ww1 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww1 ww2) of wild {
                   GHC.Types.False
                   -> letrec {
                        go :: [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                Math.Core.Field.F2)]
                              -> [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                   Math.Core.Field.F2)]
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds2 :: [(Math.CommutativeAlgebra.Polynomial.Lex
                                        [GHC.Types.Char],
                                      Math.Core.Field.F2)]) ->
                          case ds2 of wild1 {
                            []
                            -> GHC.Types.[]
                                 @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                    Math.Core.Field.F2)
                            : y ys
                            -> case y of wild2 { (,) ei xi ->
                               GHC.Types.:
                                 @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                    Math.Core.Field.F2)
                                 (ei,
                                  case xi
                                         `cast`
                                       (Math.Core.Field.N:F2[0]) of wild4 { GHC.Types.I# y1 ->
                                  (GHC.Types.I# (GHC.Prim.*# ww1 y1))
                                    `cast`
                                  (Sym (Math.Core.Field.N:F2[0])) })
                                 (go ys) } }
                      } in
                      (Math.Algebras.VectorSpace.addmerge
                         @ Math.Core.Field.F2
                         @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                         Math.Core.Field.$fEqF2
                         Math.Core.Field.$fNumF2
                         Examples.$s$fNumVect_$s$fOrdLex
                         Examples.example6
                         (go Examples.$s$fNumVect2))
                        `cast`
                      (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                                <Math.Core.Field.F2>_R
                                <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R))
                   GHC.Types.True
                   -> (Math.Algebras.VectorSpace.addmerge
                         @ Math.Core.Field.F2
                         @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                         Math.Core.Field.$fEqF2
                         Math.Core.Field.$fNumF2
                         Examples.$s$fNumVect_$s$fOrdLex
                         Examples.example6
                         (GHC.Types.[]
                            @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                               Math.Core.Field.F2)))
                        `cast`
                      (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                                <Math.Core.Field.F2>_R
                                <Math.CommutativeAlgebra.Polynomial.Lex
                                   GHC.Base.String>_R)) } } }) -}
afa208a51302887fac602a01862b4426
  example6 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.VectorSpace.addmerge
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fEqF2
                   Math.Core.Field.$fNumF2
                   Examples.$s$fNumVect_$s$fOrdLex
                   Examples.ej47
                     `cast`
                   (Math.Algebras.VectorSpace.N:Vect[0]
                        <Math.Core.Field.F2>_R
                        <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R)
                   Examples.ej7) -}
1b7d0e11038a279f11d683ee1d39dadd
  example7 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Unfolding: (case GHC.Classes.modInt# 0# 2# of ww2 { DEFAULT ->
                 case GHC.Classes.modInt# 1# 2# of ww1 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww1 ww2) of wild {
                   GHC.Types.False
                   -> letrec {
                        go :: [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                Math.Core.Field.F2)]
                              -> [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                   Math.Core.Field.F2)]
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds2 :: [(Math.CommutativeAlgebra.Polynomial.Lex
                                        [GHC.Types.Char],
                                      Math.Core.Field.F2)]) ->
                          case ds2 of wild1 {
                            []
                            -> GHC.Types.[]
                                 @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                    Math.Core.Field.F2)
                            : y ys
                            -> case y of wild2 { (,) ei xi ->
                               GHC.Types.:
                                 @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                    Math.Core.Field.F2)
                                 (ei,
                                  case xi
                                         `cast`
                                       (Math.Core.Field.N:F2[0]) of wild4 { GHC.Types.I# y1 ->
                                  (GHC.Types.I# (GHC.Prim.*# ww1 y1))
                                    `cast`
                                  (Sym (Math.Core.Field.N:F2[0])) })
                                 (go ys) } }
                      } in
                      (Math.Algebras.VectorSpace.addmerge
                         @ Math.Core.Field.F2
                         @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                         Math.Core.Field.$fEqF2
                         Math.Core.Field.$fNumF2
                         Examples.$s$fNumVect_$s$fOrdLex
                         Examples.ej47
                           `cast`
                         (Math.Algebras.VectorSpace.N:Vect[0]
                              <Math.Core.Field.F2>_R
                              <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R)
                         (go Examples.$s$fNumVect2))
                        `cast`
                      (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                                <Math.Core.Field.F2>_R
                                <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R))
                   GHC.Types.True
                   -> (Math.Algebras.VectorSpace.addmerge
                         @ Math.Core.Field.F2
                         @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                         Math.Core.Field.$fEqF2
                         Math.Core.Field.$fNumF2
                         Examples.$s$fNumVect_$s$fOrdLex
                         Examples.ej47
                           `cast`
                         (Math.Algebras.VectorSpace.N:Vect[0]
                              <Math.Core.Field.F2>_R
                              <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R)
                         (GHC.Types.[]
                            @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                               Math.Core.Field.F2)))
                        `cast`
                      (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                                <Math.Core.Field.F2>_R
                                <Math.CommutativeAlgebra.Polynomial.Lex
                                   GHC.Base.String>_R)) } } }) -}
8512e82adf414786abafb9992db36a93
  example8 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Unfolding: (case GHC.Classes.modInt# 0# 2# of ww2 { DEFAULT ->
                 case GHC.Classes.modInt# 1# 2# of ww1 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww1 ww2) of wild {
                   GHC.Types.False
                   -> letrec {
                        go :: [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                Math.Core.Field.F2)]
                              -> [(Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                   Math.Core.Field.F2)]
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds2 :: [(Math.CommutativeAlgebra.Polynomial.Lex
                                        [GHC.Types.Char],
                                      Math.Core.Field.F2)]) ->
                          case ds2 of wild1 {
                            []
                            -> GHC.Types.[]
                                 @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                    Math.Core.Field.F2)
                            : y ys
                            -> case y of wild2 { (,) ei xi ->
                               GHC.Types.:
                                 @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                                    Math.Core.Field.F2)
                                 (ei,
                                  case xi
                                         `cast`
                                       (Math.Core.Field.N:F2[0]) of wild4 { GHC.Types.I# y1 ->
                                  (GHC.Types.I# (GHC.Prim.*# ww1 y1))
                                    `cast`
                                  (Sym (Math.Core.Field.N:F2[0])) })
                                 (go ys) } }
                      } in
                      (Math.Algebras.VectorSpace.addmerge
                         @ Math.Core.Field.F2
                         @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                         Math.Core.Field.$fEqF2
                         Math.Core.Field.$fNumF2
                         Examples.$s$fNumVect_$s$fOrdLex
                         Examples.example9
                         (go Examples.$s$fNumVect2))
                        `cast`
                      (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                                <Math.Core.Field.F2>_R
                                <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R))
                   GHC.Types.True
                   -> (Math.Algebras.VectorSpace.addmerge
                         @ Math.Core.Field.F2
                         @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                         Math.Core.Field.$fEqF2
                         Math.Core.Field.$fNumF2
                         Examples.$s$fNumVect_$s$fOrdLex
                         Examples.example9
                         (GHC.Types.[]
                            @ (Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char],
                               Math.Core.Field.F2)))
                        `cast`
                      (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                                <Math.Core.Field.F2>_R
                                <Math.CommutativeAlgebra.Polynomial.Lex
                                   GHC.Base.String>_R)) } } }) -}
53c4dcc6f559e2a609094a20dbbb44ac
  example9 ::
    [(Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String,
      Math.Core.Field.F2)]
  {- Unfolding: (Math.Algebras.VectorSpace.addmerge
                   @ Math.Core.Field.F2
                   @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                   Math.Core.Field.$fEqF2
                   Math.Core.Field.$fNumF2
                   Examples.$s$fNumVect_$s$fOrdLex
                   Examples.ej47
                     `cast`
                   (Math.Algebras.VectorSpace.N:Vect[0]
                        <Math.Core.Field.F2>_R
                        <Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String>_R)
                   Examples.ej15) -}
940b1438c1e3875f10a464d4b443f4ce
  exampleSet ::
    Data.Set.Internal.Set
      (Math.CommutativeAlgebra.Polynomial.LexPoly
         Math.Core.Field.F2 GHC.Base.String)
  {- Unfolding: (Examples.$sfromList Examples.example) -}
25a1325f8762a23628e915771637ed5a
  x1 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Examples.ej15
                  `cast`
                (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                          <Math.Core.Field.F2>_R
                          <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R)) -}
6596118401d1d5eebd4f94dcb839426a
  x11 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Examples.ej21
                  `cast`
                (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                          <Math.Core.Field.F2>_R
                          <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R)) -}
7846ed6e3b3a736ee300290870afa5ef
  x2 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Examples.ej7
                  `cast`
                (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                          <Math.Core.Field.F2>_R
                          <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R)) -}
61f71d207004953c0b736be6a7bfc316
  x3 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Examples.ej41
                  `cast`
                (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                          <Math.Core.Field.F2>_R
                          <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R)) -}
737edf2da0c72741280eb53e66f0fb3d
  x4 ::
    Math.CommutativeAlgebra.Polynomial.LexPoly
      Math.Core.Field.F2 GHC.Base.String
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Examples.ej31
                  `cast`
                (Sym (Math.Algebras.VectorSpace.N:Vect[0]
                          <Math.Core.Field.F2>_R
                          <Math.CommutativeAlgebra.Polynomial.Lex [GHC.Types.Char]>_R)) -}
"SPEC/Examples $fEqLex @ [Char]" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                            [GHC.Types.Char])
  Math.CommutativeAlgebra.Polynomial.$fEqLex @ [GHC.Types.Char] $dEq
  = Examples.$s$fEqLex
"SPEC/Examples $fEqVect @ F2 @ (Lex String)" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                         (Math.CommutativeAlgebra.Polynomial.Lex
                                                                            GHC.Base.String))
                                                             ($dEq :: GHC.Classes.Eq
                                                                        Math.Core.Field.F2)
  Math.Algebras.VectorSpace.$fEqVect @ Math.Core.Field.F2
                                     @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                                     $dEq
                                     $dEq1
  = Examples.$s$fEqVect
"SPEC/Examples $fOrdLex @ [Char]" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                              [GHC.Types.Char])
  Math.CommutativeAlgebra.Polynomial.$fOrdLex @ [GHC.Types.Char]
                                              $dOrd
  = Examples.$s$fNumVect_$s$fOrdLex
"SPEC/Examples $fOrdLex_$cp1Ord @ [Char]" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                      [GHC.Types.Char])
  Math.CommutativeAlgebra.Polynomial.$fOrdLex_$cp1Ord @ [GHC.Types.Char]
                                                      $dOrd
  = Examples.$s$fEqVect_$s$fOrdLex_$cp1Ord
"SPEC/Examples $fOrdVect @ F2 @ (Lex String)" [ALWAYS] forall ($dOrd1 :: GHC.Classes.Ord
                                                                           (Math.CommutativeAlgebra.Polynomial.Lex
                                                                              GHC.Base.String))
                                                              ($dOrd :: GHC.Classes.Ord
                                                                          Math.Core.Field.F2)
  Math.Algebras.VectorSpace.$fOrdVect @ Math.Core.Field.F2
                                      @ (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String)
                                      $dOrd
                                      $dOrd1
  = Examples.$s$fOrdVect
"SPEC/Examples $fOrdVect_$cp1Ord @ F2 @ (Lex String)" [ALWAYS] forall ($dOrd1 :: GHC.Classes.Ord
                                                                                   (Math.CommutativeAlgebra.Polynomial.Lex
                                                                                      GHC.Base.String))
                                                                      ($dOrd :: GHC.Classes.Ord
                                                                                  Math.Core.Field.F2)
  Math.Algebras.VectorSpace.$fOrdVect_$cp1Ord @ Math.Core.Field.F2
                                              @ (Math.CommutativeAlgebra.Polynomial.Lex
                                                   GHC.Base.String)
                                              $dOrd
                                              $dOrd1
  = Examples.$s$fOrdVect_$s$fOrdVect_$cp1Ord
"SPEC/Examples ^ @ (LexPoly F2 String) @ Integer" [1] forall ($dIntegral :: GHC.Real.Integral
                                                                              GHC.Integer.Type.Integer)
                                                             ($dNum :: GHC.Num.Num
                                                                         (Math.CommutativeAlgebra.Polynomial.LexPoly
                                                                            Math.Core.Field.F2
                                                                            GHC.Base.String))
  GHC.Real.^ @ (Math.Algebras.VectorSpace.Vect
                  Math.Core.Field.F2
                  (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String))
             @ GHC.Integer.Type.Integer
             $dNum
             $dIntegral
  = Examples.$s^
"SPEC/Examples fromList @ (LexPoly F2 String)" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                           (Math.CommutativeAlgebra.Polynomial.LexPoly
                                                                              Math.Core.Field.F2
                                                                              GHC.Base.String))
  Data.Set.Internal.fromList @ (Math.Algebras.VectorSpace.Vect
                                  Math.Core.Field.F2
                                  (Math.CommutativeAlgebra.Polynomial.Lex GHC.Base.String))
                             $dOrd
  = Examples.$sfromList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

